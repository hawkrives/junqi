/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var objeqParser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"query":4,"EOF":5,"step":6,"THEN":7,"where":8,"filter":9,"aggr":10,"expr":11,"WHERE":12,"order_by":13,"selector":14,"+":15,"-":16,"*":17,"/":18,"%":19,"AND":20,"OR":21,"EQ":22,"NEQ":23,"RE":24,"GT":25,"GTE":26,"LT":27,"LTE":28,"IN":29,"AS":30,"SYMBOL":31,"NOT":32,"(":33,")":34,"ternary":35,"func":36,"array":37,"obj":38,"NUMBER":39,"STRING":40,"TRUE":41,"FALSE":42,"NULL":43,"UNDEFINED":44,"path":45,"?":46,":":47,"IDENT":48,"expr_list":49,"[":50,"]":51,",":52,"{":53,"obj_items":54,"}":55,"obj_item":56,"obj_non_id":57,"SELECT":58,"CONTRACT":59,"EXPAND":60,"ORDER_BY":61,"order_list":62,"order_spec":63,"local_path":64,"ASC":65,"DESC":66,"AGGREGATE":67,"aggr_list":68,"arg_path":69,"ARGREF":70,".":71,"THIS":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"THEN",12:"WHERE",15:"+",16:"-",17:"*",18:"/",19:"%",20:"AND",21:"OR",22:"EQ",23:"NEQ",24:"RE",25:"GT",26:"GTE",27:"LT",28:"LTE",29:"IN",30:"AS",31:"SYMBOL",32:"NOT",33:"(",34:")",39:"NUMBER",40:"STRING",41:"TRUE",42:"FALSE",43:"NULL",44:"UNDEFINED",46:"?",47:":",48:"IDENT",50:"[",51:"]",52:",",53:"{",55:"}",58:"SELECT",59:"CONTRACT",60:"EXPAND",61:"ORDER_BY",65:"ASC",66:"DESC",67:"AGGREGATE",70:"ARGREF",71:".",72:"THIS"},
productions_: [0,[3,2],[4,1],[4,3],[6,1],[6,2],[6,2],[6,3],[6,1],[6,2],[6,1],[8,1],[8,2],[9,1],[9,2],[9,1],[9,2],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,3],[11,2],[11,2],[11,3],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[35,5],[36,4],[36,3],[37,3],[37,2],[49,1],[49,3],[38,3],[38,2],[54,1],[54,3],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[56,3],[56,3],[56,1],[14,2],[14,2],[14,2],[13,2],[62,1],[62,3],[63,1],[63,2],[63,2],[10,2],[68,1],[68,3],[45,1],[45,1],[69,1],[69,3],[69,4],[64,1],[64,1],[64,1],[64,3],[64,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = [$$[$0]]; 
break;
case 3: this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); yy.step += 1; 
break;
case 4: this.$ = $$[$0]; 
break;
case 5: this.$ = $$[$0]; $$[$0].expr = $$[$0-1].expr; 
break;
case 6: this.$ = $$[$0-1]; $$[$0-1].aggregate = $$[$0]; 
break;
case 7: this.$ = $$[$0-1]; $$[$0-1].expr = $$[$0-2].expr; $$[$0-1].aggregate = $$[$0]; 
break;
case 8: this.$ = $$[$0]; 
break;
case 9: this.$ = $$[$0-1]; $$[$0-1].aggregate = $$[$0]; 
break;
case 10: this.$ = { aggregate: $$[$0] }; 
break;
case 11: this.$ = { expr: $$[$0] }; 
break;
case 12: this.$ = { expr: $$[$0] }; 
break;
case 13: this.$ = { order: $$[$0], sortFirst: true }; 
break;
case 14: this.$ = { order: $$[$0-1], select: $$[$0], sortFirst: true }; 
break;
case 15: this.$ = { select: $$[$0] }; 
break;
case 16: this.$ = { select: $$[$0-1], order: $$[$0] }; 
break;
case 17: this.$ = yy.node('add', $$[$0-2], $$[$0]); 
break;
case 18: this.$ = yy.node('sub', $$[$0-2], $$[$0]); 
break;
case 19: this.$ = yy.node('mul', $$[$0-2], $$[$0]); 
break;
case 20: this.$ = yy.node('div', $$[$0-2], $$[$0]); 
break;
case 21: this.$ = yy.node('mod', $$[$0-2], $$[$0]); 
break;
case 22: this.$ = yy.node('and', $$[$0-2], $$[$0]); 
break;
case 23: this.$ = yy.node('or', $$[$0-2], $$[$0]); 
break;
case 24: this.$ = yy.node('eq', $$[$0-2], $$[$0]); 
break;
case 25: this.$ = yy.node('neq', $$[$0-2], $$[$0]); 
break;
case 26: this.$ = yy.node('re', $$[$0-2], $$[$0]); 
break;
case 27: this.$ = yy.node('gt', $$[$0-2], $$[$0]); 
break;
case 28: this.$ = yy.node('gte', $$[$0-2], $$[$0]); 
break;
case 29: this.$ = yy.node('lt', $$[$0-2], $$[$0]); 
break;
case 30: this.$ = yy.node('lte', $$[$0-2], $$[$0]); 
break;
case 31: this.$ = yy.node('in', $$[$0-2], $$[$0]); 
break;
case 32: this.$ = yy.node('as', $$[$0-2], $$[$0]); 
break;
case 33: this.$ = yy.node('not', $$[$0]); 
break;
case 34: this.$ = yy.node('neg', $$[$0]); 
break;
case 35: this.$ = $$[$0-1]; 
break;
case 36: this.$ = $$[$0]; 
break;
case 37: this.$ = $$[$0]; 
break;
case 38: this.$ = $$[$0]; 
break;
case 39: this.$ = $$[$0]; 
break;
case 40: this.$ = Number(yytext); 
break;
case 41: this.$ = yytext; 
break;
case 42: this.$ = true; 
break;
case 43: this.$ = false; 
break;
case 44: this.$ = null; 
break;
case 45: this.$ = undefined; 
break;
case 46: this.$ = $$[$0]; 
break;
case 47: this.$ = yy.node('tern', $$[$0-4], $$[$0-2], $$[$0]); 
break;
case 48: this.$ = yy.node('func', $$[$0-3], $$[$0-1]); 
break;
case 49: this.$ = yy.node('func', $$[$0-2], []); 
break;
case 50: this.$ = yy.node('arr', $$[$0-1]); 
break;
case 51: this.$ = yy.node('arr', []); 
break;
case 52: this.$ = [$$[$0]]; 
break;
case 53: this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 54: this.$ = yy.node('obj', $$[$0-1]); 
break;
case 55: this.$ = yy.node('obj', {}); 
break;
case 56: this.$ = {}; this.$[$$[$0][0]] = $$[$0][1]; 
break;
case 57: this.$ = $$[$0-2]; this.$[$$[$0][0]] = $$[$0][1]; 
break;
case 64: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 65: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 66: this.$ = [$$[$0], yy.path('local', $$[$0])]; 
break;
case 67: this.$ = yy.node('select', $$[$0]); 
break;
case 68: this.$ = yy.node('contract', $$[$0]); 
break;
case 69: this.$ = yy.node('expand', $$[$0]); 
break;
case 70: this.$ = $$[$0]; 
break;
case 71: this.$ = [$$[$0]]; 
break;
case 72: this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 73: this.$ = { path: $$[$0], ascending: true }; 
break;
case 74: this.$ = { path: $$[$0-1], ascending: true }; 
break;
case 75: this.$ = { path: $$[$0-1] }; 
break;
case 76: this.$ = $$[$0]; 
break;
case 77: this.$ = [$$[$0]]; 
break;
case 78: this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 79: this.$ = $$[$0]; 
break;
case 80: this.$ = $$[$0]; 
break;
case 81: this.$ = yy.path('arg', Number($$[$0])-1); 
break;
case 82: this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 83: this.$ = $$[$0-3]; $$[$0-3].push($$[$0-1]); 
break;
case 84: this.$ = yy.path('local'); 
break;
case 85: this.$ = yy.path('local', $$[$0]); 
break;
case 86: this.$ = yy.path('symbol', $$[$0]); 
break;
case 87: this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 88: this.$ = $$[$0-3]; $$[$0-3].push($$[$0-1]); 
break;
}
},
table: [{3:1,4:2,6:3,8:4,9:5,10:6,11:7,12:[1,8],13:9,14:10,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],58:[1,27],59:[1,28],60:[1,29],61:[1,26],64:34,67:[1,11],69:33,70:[1,35],72:[1,36]},{1:[3]},{5:[1,38],7:[1,39]},{5:[2,2],7:[2,2]},{5:[2,4],7:[2,4],9:40,10:41,13:9,14:10,58:[1,27],59:[1,28],60:[1,29],61:[1,26],67:[1,11]},{5:[2,8],7:[2,8],10:42,67:[1,11]},{5:[2,10],7:[2,10]},{5:[2,11],7:[2,11],15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[1,48],21:[1,49],22:[1,50],23:[1,51],24:[1,52],25:[1,53],26:[1,54],27:[1,55],28:[1,56],29:[1,57],30:[1,58],46:[1,59],58:[2,11],59:[2,11],60:[2,11],61:[2,11],67:[2,11]},{11:60,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{5:[2,13],7:[2,13],14:61,58:[1,27],59:[1,28],60:[1,29],67:[2,13]},{5:[2,15],7:[2,15],13:62,61:[1,26],67:[2,15]},{48:[1,64],68:63},{11:65,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{11:66,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{11:67,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{5:[2,36],7:[2,36],15:[2,36],16:[2,36],17:[2,36],18:[2,36],19:[2,36],20:[2,36],21:[2,36],22:[2,36],23:[2,36],24:[2,36],25:[2,36],26:[2,36],27:[2,36],28:[2,36],29:[2,36],30:[2,36],34:[2,36],46:[2,36],47:[2,36],51:[2,36],52:[2,36],55:[2,36],58:[2,36],59:[2,36],60:[2,36],61:[2,36],67:[2,36]},{5:[2,37],7:[2,37],15:[2,37],16:[2,37],17:[2,37],18:[2,37],19:[2,37],20:[2,37],21:[2,37],22:[2,37],23:[2,37],24:[2,37],25:[2,37],26:[2,37],27:[2,37],28:[2,37],29:[2,37],30:[2,37],34:[2,37],46:[2,37],47:[2,37],51:[2,37],52:[2,37],55:[2,37],58:[2,37],59:[2,37],60:[2,37],61:[2,37],67:[2,37]},{5:[2,38],7:[2,38],15:[2,38],16:[2,38],17:[2,38],18:[2,38],19:[2,38],20:[2,38],21:[2,38],22:[2,38],23:[2,38],24:[2,38],25:[2,38],26:[2,38],27:[2,38],28:[2,38],29:[2,38],30:[2,38],34:[2,38],46:[2,38],47:[2,38],51:[2,38],52:[2,38],55:[2,38],58:[2,38],59:[2,38],60:[2,38],61:[2,38],67:[2,38]},{5:[2,39],7:[2,39],15:[2,39],16:[2,39],17:[2,39],18:[2,39],19:[2,39],20:[2,39],21:[2,39],22:[2,39],23:[2,39],24:[2,39],25:[2,39],26:[2,39],27:[2,39],28:[2,39],29:[2,39],30:[2,39],34:[2,39],46:[2,39],47:[2,39],51:[2,39],52:[2,39],55:[2,39],58:[2,39],59:[2,39],60:[2,39],61:[2,39],67:[2,39]},{5:[2,40],7:[2,40],15:[2,40],16:[2,40],17:[2,40],18:[2,40],19:[2,40],20:[2,40],21:[2,40],22:[2,40],23:[2,40],24:[2,40],25:[2,40],26:[2,40],27:[2,40],28:[2,40],29:[2,40],30:[2,40],34:[2,40],46:[2,40],47:[2,40],51:[2,40],52:[2,40],55:[2,40],58:[2,40],59:[2,40],60:[2,40],61:[2,40],67:[2,40]},{5:[2,41],7:[2,41],15:[2,41],16:[2,41],17:[2,41],18:[2,41],19:[2,41],20:[2,41],21:[2,41],22:[2,41],23:[2,41],24:[2,41],25:[2,41],26:[2,41],27:[2,41],28:[2,41],29:[2,41],30:[2,41],34:[2,41],46:[2,41],47:[2,41],51:[2,41],52:[2,41],55:[2,41],58:[2,41],59:[2,41],60:[2,41],61:[2,41],67:[2,41]},{5:[2,42],7:[2,42],15:[2,42],16:[2,42],17:[2,42],18:[2,42],19:[2,42],20:[2,42],21:[2,42],22:[2,42],23:[2,42],24:[2,42],25:[2,42],26:[2,42],27:[2,42],28:[2,42],29:[2,42],30:[2,42],34:[2,42],46:[2,42],47:[2,42],51:[2,42],52:[2,42],55:[2,42],58:[2,42],59:[2,42],60:[2,42],61:[2,42],67:[2,42]},{5:[2,43],7:[2,43],15:[2,43],16:[2,43],17:[2,43],18:[2,43],19:[2,43],20:[2,43],21:[2,43],22:[2,43],23:[2,43],24:[2,43],25:[2,43],26:[2,43],27:[2,43],28:[2,43],29:[2,43],30:[2,43],34:[2,43],46:[2,43],47:[2,43],51:[2,43],52:[2,43],55:[2,43],58:[2,43],59:[2,43],60:[2,43],61:[2,43],67:[2,43]},{5:[2,44],7:[2,44],15:[2,44],16:[2,44],17:[2,44],18:[2,44],19:[2,44],20:[2,44],21:[2,44],22:[2,44],23:[2,44],24:[2,44],25:[2,44],26:[2,44],27:[2,44],28:[2,44],29:[2,44],30:[2,44],34:[2,44],46:[2,44],47:[2,44],51:[2,44],52:[2,44],55:[2,44],58:[2,44],59:[2,44],60:[2,44],61:[2,44],67:[2,44]},{5:[2,45],7:[2,45],15:[2,45],16:[2,45],17:[2,45],18:[2,45],19:[2,45],20:[2,45],21:[2,45],22:[2,45],23:[2,45],24:[2,45],25:[2,45],26:[2,45],27:[2,45],28:[2,45],29:[2,45],30:[2,45],34:[2,45],46:[2,45],47:[2,45],51:[2,45],52:[2,45],55:[2,45],58:[2,45],59:[2,45],60:[2,45],61:[2,45],67:[2,45]},{5:[2,46],7:[2,46],15:[2,46],16:[2,46],17:[2,46],18:[2,46],19:[2,46],20:[2,46],21:[2,46],22:[2,46],23:[2,46],24:[2,46],25:[2,46],26:[2,46],27:[2,46],28:[2,46],29:[2,46],30:[2,46],34:[2,46],46:[2,46],47:[2,46],51:[2,46],52:[2,46],55:[2,46],58:[2,46],59:[2,46],60:[2,46],61:[2,46],67:[2,46]},{31:[1,37],48:[1,71],62:68,63:69,64:70,72:[1,36]},{11:72,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{11:73,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{11:74,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{5:[2,85],7:[2,85],15:[2,85],16:[2,85],17:[2,85],18:[2,85],19:[2,85],20:[2,85],21:[2,85],22:[2,85],23:[2,85],24:[2,85],25:[2,85],26:[2,85],27:[2,85],28:[2,85],29:[2,85],30:[2,85],33:[1,75],34:[2,85],46:[2,85],47:[2,85],50:[2,85],51:[2,85],52:[2,85],55:[2,85],58:[2,85],59:[2,85],60:[2,85],61:[2,85],67:[2,85],71:[2,85]},{11:78,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],49:76,50:[1,31],51:[1,77],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{39:[1,84],40:[1,85],41:[1,86],42:[1,87],43:[1,88],44:[1,89],48:[1,83],54:79,55:[1,80],56:81,57:82},{5:[2,79],7:[2,79],15:[2,79],16:[2,79],17:[2,79],18:[2,79],19:[2,79],20:[2,79],21:[2,79],22:[2,79],23:[2,79],24:[2,79],25:[2,79],26:[2,79],27:[2,79],28:[2,79],29:[2,79],30:[2,79],34:[2,79],46:[2,79],47:[2,79],50:[1,91],51:[2,79],52:[2,79],55:[2,79],58:[2,79],59:[2,79],60:[2,79],61:[2,79],67:[2,79],71:[1,90]},{5:[2,80],7:[2,80],15:[2,80],16:[2,80],17:[2,80],18:[2,80],19:[2,80],20:[2,80],21:[2,80],22:[2,80],23:[2,80],24:[2,80],25:[2,80],26:[2,80],27:[2,80],28:[2,80],29:[2,80],30:[2,80],34:[2,80],46:[2,80],47:[2,80],50:[1,93],51:[2,80],52:[2,80],55:[2,80],58:[2,80],59:[2,80],60:[2,80],61:[2,80],67:[2,80],71:[1,92]},{5:[2,81],7:[2,81],15:[2,81],16:[2,81],17:[2,81],18:[2,81],19:[2,81],20:[2,81],21:[2,81],22:[2,81],23:[2,81],24:[2,81],25:[2,81],26:[2,81],27:[2,81],28:[2,81],29:[2,81],30:[2,81],34:[2,81],46:[2,81],47:[2,81],50:[2,81],51:[2,81],52:[2,81],55:[2,81],58:[2,81],59:[2,81],60:[2,81],61:[2,81],67:[2,81],71:[2,81]},{5:[2,84],7:[2,84],15:[2,84],16:[2,84],17:[2,84],18:[2,84],19:[2,84],20:[2,84],21:[2,84],22:[2,84],23:[2,84],24:[2,84],25:[2,84],26:[2,84],27:[2,84],28:[2,84],29:[2,84],30:[2,84],34:[2,84],46:[2,84],47:[2,84],50:[2,84],51:[2,84],52:[2,84],55:[2,84],58:[2,84],59:[2,84],60:[2,84],61:[2,84],65:[2,84],66:[2,84],67:[2,84],71:[2,84]},{5:[2,86],7:[2,86],15:[2,86],16:[2,86],17:[2,86],18:[2,86],19:[2,86],20:[2,86],21:[2,86],22:[2,86],23:[2,86],24:[2,86],25:[2,86],26:[2,86],27:[2,86],28:[2,86],29:[2,86],30:[2,86],34:[2,86],46:[2,86],47:[2,86],50:[2,86],51:[2,86],52:[2,86],55:[2,86],58:[2,86],59:[2,86],60:[2,86],61:[2,86],65:[2,86],66:[2,86],67:[2,86],71:[2,86]},{1:[2,1]},{6:94,8:4,9:5,10:6,11:7,12:[1,8],13:9,14:10,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],58:[1,27],59:[1,28],60:[1,29],61:[1,26],64:34,67:[1,11],69:33,70:[1,35],72:[1,36]},{5:[2,5],7:[2,5],10:95,67:[1,11]},{5:[2,6],7:[2,6]},{5:[2,9],7:[2,9]},{11:96,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{11:97,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{11:98,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{11:99,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{11:100,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{11:101,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{11:102,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{11:103,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{11:104,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{11:105,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{11:106,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{11:107,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{11:108,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{11:109,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{11:110,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{31:[1,111]},{11:112,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{5:[2,12],7:[2,12],15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[1,48],21:[1,49],22:[1,50],23:[1,51],24:[1,52],25:[1,53],26:[1,54],27:[1,55],28:[1,56],29:[1,57],30:[1,58],46:[1,59],58:[2,12],59:[2,12],60:[2,12],61:[2,12],67:[2,12]},{5:[2,14],7:[2,14],67:[2,14]},{5:[2,16],7:[2,16],67:[2,16]},{5:[2,76],7:[2,76],52:[1,113]},{5:[2,77],7:[2,77],52:[2,77]},{5:[2,33],7:[2,33],15:[2,33],16:[2,33],17:[2,33],18:[2,33],19:[2,33],20:[2,33],21:[2,33],22:[2,33],23:[2,33],24:[2,33],25:[2,33],26:[2,33],27:[2,33],28:[2,33],29:[2,33],30:[1,58],34:[2,33],46:[2,33],47:[2,33],51:[2,33],52:[2,33],55:[2,33],58:[2,33],59:[2,33],60:[2,33],61:[2,33],67:[2,33]},{5:[2,34],7:[2,34],15:[2,34],16:[2,34],17:[2,34],18:[2,34],19:[2,34],20:[2,34],21:[2,34],22:[2,34],23:[2,34],24:[2,34],25:[2,34],26:[2,34],27:[2,34],28:[2,34],29:[2,34],30:[1,58],34:[2,34],46:[2,34],47:[2,34],51:[2,34],52:[2,34],55:[2,34],58:[2,34],59:[2,34],60:[2,34],61:[2,34],67:[2,34]},{15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[1,48],21:[1,49],22:[1,50],23:[1,51],24:[1,52],25:[1,53],26:[1,54],27:[1,55],28:[1,56],29:[1,57],30:[1,58],34:[1,114],46:[1,59]},{5:[2,70],7:[2,70],52:[1,115],58:[2,70],59:[2,70],60:[2,70],67:[2,70]},{5:[2,71],7:[2,71],52:[2,71],58:[2,71],59:[2,71],60:[2,71],67:[2,71]},{5:[2,73],7:[2,73],50:[1,93],52:[2,73],58:[2,73],59:[2,73],60:[2,73],65:[1,116],66:[1,117],67:[2,73],71:[1,92]},{5:[2,85],7:[2,85],50:[2,85],52:[2,85],58:[2,85],59:[2,85],60:[2,85],65:[2,85],66:[2,85],67:[2,85],71:[2,85]},{5:[2,67],7:[2,67],15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[1,48],21:[1,49],22:[1,50],23:[1,51],24:[1,52],25:[1,53],26:[1,54],27:[1,55],28:[1,56],29:[1,57],30:[1,58],46:[1,59],61:[2,67],67:[2,67]},{5:[2,68],7:[2,68],15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[1,48],21:[1,49],22:[1,50],23:[1,51],24:[1,52],25:[1,53],26:[1,54],27:[1,55],28:[1,56],29:[1,57],30:[1,58],46:[1,59],61:[2,68],67:[2,68]},{5:[2,69],7:[2,69],15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[1,48],21:[1,49],22:[1,50],23:[1,51],24:[1,52],25:[1,53],26:[1,54],27:[1,55],28:[1,56],29:[1,57],30:[1,58],46:[1,59],61:[2,69],67:[2,69]},{11:78,16:[1,13],31:[1,37],32:[1,12],33:[1,14],34:[1,119],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],49:118,50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{51:[1,120],52:[1,121]},{5:[2,51],7:[2,51],15:[2,51],16:[2,51],17:[2,51],18:[2,51],19:[2,51],20:[2,51],21:[2,51],22:[2,51],23:[2,51],24:[2,51],25:[2,51],26:[2,51],27:[2,51],28:[2,51],29:[2,51],30:[2,51],34:[2,51],46:[2,51],47:[2,51],51:[2,51],52:[2,51],55:[2,51],58:[2,51],59:[2,51],60:[2,51],61:[2,51],67:[2,51]},{15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[1,48],21:[1,49],22:[1,50],23:[1,51],24:[1,52],25:[1,53],26:[1,54],27:[1,55],28:[1,56],29:[1,57],30:[1,58],34:[2,52],46:[1,59],51:[2,52],52:[2,52]},{52:[1,123],55:[1,122]},{5:[2,55],7:[2,55],15:[2,55],16:[2,55],17:[2,55],18:[2,55],19:[2,55],20:[2,55],21:[2,55],22:[2,55],23:[2,55],24:[2,55],25:[2,55],26:[2,55],27:[2,55],28:[2,55],29:[2,55],30:[2,55],34:[2,55],46:[2,55],47:[2,55],51:[2,55],52:[2,55],55:[2,55],58:[2,55],59:[2,55],60:[2,55],61:[2,55],67:[2,55]},{52:[2,56],55:[2,56]},{47:[1,124]},{47:[1,125],52:[2,66],55:[2,66]},{47:[2,58]},{47:[2,59]},{47:[2,60]},{47:[2,61]},{47:[2,62]},{47:[2,63]},{48:[1,126]},{11:127,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{48:[1,128]},{11:129,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{5:[2,3],7:[2,3]},{5:[2,7],7:[2,7]},{5:[2,17],7:[2,17],15:[2,17],16:[2,17],17:[1,45],18:[1,46],19:[1,47],20:[2,17],21:[2,17],22:[2,17],23:[2,17],24:[2,17],25:[2,17],26:[2,17],27:[2,17],28:[2,17],29:[2,17],30:[1,58],34:[2,17],46:[2,17],47:[2,17],51:[2,17],52:[2,17],55:[2,17],58:[2,17],59:[2,17],60:[2,17],61:[2,17],67:[2,17]},{5:[2,18],7:[2,18],15:[2,18],16:[2,18],17:[1,45],18:[1,46],19:[1,47],20:[2,18],21:[2,18],22:[2,18],23:[2,18],24:[2,18],25:[2,18],26:[2,18],27:[2,18],28:[2,18],29:[2,18],30:[1,58],34:[2,18],46:[2,18],47:[2,18],51:[2,18],52:[2,18],55:[2,18],58:[2,18],59:[2,18],60:[2,18],61:[2,18],67:[2,18]},{5:[2,19],7:[2,19],15:[2,19],16:[2,19],17:[2,19],18:[2,19],19:[2,19],20:[2,19],21:[2,19],22:[2,19],23:[2,19],24:[2,19],25:[2,19],26:[2,19],27:[2,19],28:[2,19],29:[2,19],30:[1,58],34:[2,19],46:[2,19],47:[2,19],51:[2,19],52:[2,19],55:[2,19],58:[2,19],59:[2,19],60:[2,19],61:[2,19],67:[2,19]},{5:[2,20],7:[2,20],15:[2,20],16:[2,20],17:[2,20],18:[2,20],19:[2,20],20:[2,20],21:[2,20],22:[2,20],23:[2,20],24:[2,20],25:[2,20],26:[2,20],27:[2,20],28:[2,20],29:[2,20],30:[1,58],34:[2,20],46:[2,20],47:[2,20],51:[2,20],52:[2,20],55:[2,20],58:[2,20],59:[2,20],60:[2,20],61:[2,20],67:[2,20]},{5:[2,21],7:[2,21],15:[2,21],16:[2,21],17:[2,21],18:[2,21],19:[2,21],20:[2,21],21:[2,21],22:[2,21],23:[2,21],24:[2,21],25:[2,21],26:[2,21],27:[2,21],28:[2,21],29:[2,21],30:[1,58],34:[2,21],46:[2,21],47:[2,21],51:[2,21],52:[2,21],55:[2,21],58:[2,21],59:[2,21],60:[2,21],61:[2,21],67:[2,21]},{5:[2,22],7:[2,22],15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[2,22],21:[2,22],22:[1,50],23:[1,51],24:[1,52],25:[1,53],26:[1,54],27:[1,55],28:[1,56],29:[1,57],30:[1,58],34:[2,22],46:[2,22],47:[2,22],51:[2,22],52:[2,22],55:[2,22],58:[2,22],59:[2,22],60:[2,22],61:[2,22],67:[2,22]},{5:[2,23],7:[2,23],15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[1,48],21:[2,23],22:[1,50],23:[1,51],24:[1,52],25:[1,53],26:[1,54],27:[1,55],28:[1,56],29:[1,57],30:[1,58],34:[2,23],46:[2,23],47:[2,23],51:[2,23],52:[2,23],55:[2,23],58:[2,23],59:[2,23],60:[2,23],61:[2,23],67:[2,23]},{5:[2,24],7:[2,24],15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[2,24],21:[2,24],22:[2,24],23:[2,24],24:[2,24],25:[1,53],26:[1,54],27:[1,55],28:[1,56],29:[2,24],30:[1,58],34:[2,24],46:[2,24],47:[2,24],51:[2,24],52:[2,24],55:[2,24],58:[2,24],59:[2,24],60:[2,24],61:[2,24],67:[2,24]},{5:[2,25],7:[2,25],15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[2,25],21:[2,25],22:[2,25],23:[2,25],24:[2,25],25:[1,53],26:[1,54],27:[1,55],28:[1,56],29:[2,25],30:[1,58],34:[2,25],46:[2,25],47:[2,25],51:[2,25],52:[2,25],55:[2,25],58:[2,25],59:[2,25],60:[2,25],61:[2,25],67:[2,25]},{5:[2,26],7:[2,26],15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[2,26],21:[2,26],22:[2,26],23:[2,26],24:[2,26],25:[1,53],26:[1,54],27:[1,55],28:[1,56],29:[2,26],30:[1,58],34:[2,26],46:[2,26],47:[2,26],51:[2,26],52:[2,26],55:[2,26],58:[2,26],59:[2,26],60:[2,26],61:[2,26],67:[2,26]},{5:[2,27],7:[2,27],15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[2,27],21:[2,27],22:[2,27],23:[2,27],24:[2,27],25:[2,27],26:[2,27],27:[2,27],28:[2,27],29:[2,27],30:[1,58],34:[2,27],46:[2,27],47:[2,27],51:[2,27],52:[2,27],55:[2,27],58:[2,27],59:[2,27],60:[2,27],61:[2,27],67:[2,27]},{5:[2,28],7:[2,28],15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[2,28],21:[2,28],22:[2,28],23:[2,28],24:[2,28],25:[2,28],26:[2,28],27:[2,28],28:[2,28],29:[2,28],30:[1,58],34:[2,28],46:[2,28],47:[2,28],51:[2,28],52:[2,28],55:[2,28],58:[2,28],59:[2,28],60:[2,28],61:[2,28],67:[2,28]},{5:[2,29],7:[2,29],15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[2,29],21:[2,29],22:[2,29],23:[2,29],24:[2,29],25:[2,29],26:[2,29],27:[2,29],28:[2,29],29:[2,29],30:[1,58],34:[2,29],46:[2,29],47:[2,29],51:[2,29],52:[2,29],55:[2,29],58:[2,29],59:[2,29],60:[2,29],61:[2,29],67:[2,29]},{5:[2,30],7:[2,30],15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[2,30],21:[2,30],22:[2,30],23:[2,30],24:[2,30],25:[2,30],26:[2,30],27:[2,30],28:[2,30],29:[2,30],30:[1,58],34:[2,30],46:[2,30],47:[2,30],51:[2,30],52:[2,30],55:[2,30],58:[2,30],59:[2,30],60:[2,30],61:[2,30],67:[2,30]},{5:[2,31],7:[2,31],15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[2,31],21:[2,31],22:[2,31],23:[2,31],24:[2,31],25:[1,53],26:[1,54],27:[1,55],28:[1,56],29:[2,31],30:[1,58],34:[2,31],46:[2,31],47:[2,31],51:[2,31],52:[2,31],55:[2,31],58:[2,31],59:[2,31],60:[2,31],61:[2,31],67:[2,31]},{5:[2,32],7:[2,32],15:[2,32],16:[2,32],17:[2,32],18:[2,32],19:[2,32],20:[2,32],21:[2,32],22:[2,32],23:[2,32],24:[2,32],25:[2,32],26:[2,32],27:[2,32],28:[2,32],29:[2,32],30:[2,32],34:[2,32],46:[2,32],47:[2,32],51:[2,32],52:[2,32],55:[2,32],58:[2,32],59:[2,32],60:[2,32],61:[2,32],67:[2,32]},{15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[1,48],21:[1,49],22:[1,50],23:[1,51],24:[1,52],25:[1,53],26:[1,54],27:[1,55],28:[1,56],29:[1,57],30:[1,58],46:[1,59],47:[1,130]},{48:[1,131]},{5:[2,35],7:[2,35],15:[2,35],16:[2,35],17:[2,35],18:[2,35],19:[2,35],20:[2,35],21:[2,35],22:[2,35],23:[2,35],24:[2,35],25:[2,35],26:[2,35],27:[2,35],28:[2,35],29:[2,35],30:[2,35],34:[2,35],46:[2,35],47:[2,35],51:[2,35],52:[2,35],55:[2,35],58:[2,35],59:[2,35],60:[2,35],61:[2,35],67:[2,35]},{31:[1,37],48:[1,71],63:132,64:70,72:[1,36]},{5:[2,74],7:[2,74],52:[2,74],58:[2,74],59:[2,74],60:[2,74],67:[2,74]},{5:[2,75],7:[2,75],52:[2,75],58:[2,75],59:[2,75],60:[2,75],67:[2,75]},{34:[1,133],52:[1,121]},{5:[2,49],7:[2,49],15:[2,49],16:[2,49],17:[2,49],18:[2,49],19:[2,49],20:[2,49],21:[2,49],22:[2,49],23:[2,49],24:[2,49],25:[2,49],26:[2,49],27:[2,49],28:[2,49],29:[2,49],30:[2,49],34:[2,49],46:[2,49],47:[2,49],51:[2,49],52:[2,49],55:[2,49],58:[2,49],59:[2,49],60:[2,49],61:[2,49],67:[2,49]},{5:[2,50],7:[2,50],15:[2,50],16:[2,50],17:[2,50],18:[2,50],19:[2,50],20:[2,50],21:[2,50],22:[2,50],23:[2,50],24:[2,50],25:[2,50],26:[2,50],27:[2,50],28:[2,50],29:[2,50],30:[2,50],34:[2,50],46:[2,50],47:[2,50],51:[2,50],52:[2,50],55:[2,50],58:[2,50],59:[2,50],60:[2,50],61:[2,50],67:[2,50]},{11:134,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{5:[2,54],7:[2,54],15:[2,54],16:[2,54],17:[2,54],18:[2,54],19:[2,54],20:[2,54],21:[2,54],22:[2,54],23:[2,54],24:[2,54],25:[2,54],26:[2,54],27:[2,54],28:[2,54],29:[2,54],30:[2,54],34:[2,54],46:[2,54],47:[2,54],51:[2,54],52:[2,54],55:[2,54],58:[2,54],59:[2,54],60:[2,54],61:[2,54],67:[2,54]},{39:[1,84],40:[1,85],41:[1,86],42:[1,87],43:[1,88],44:[1,89],48:[1,83],56:135,57:82},{11:136,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{11:137,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{5:[2,82],7:[2,82],15:[2,82],16:[2,82],17:[2,82],18:[2,82],19:[2,82],20:[2,82],21:[2,82],22:[2,82],23:[2,82],24:[2,82],25:[2,82],26:[2,82],27:[2,82],28:[2,82],29:[2,82],30:[2,82],34:[2,82],46:[2,82],47:[2,82],50:[2,82],51:[2,82],52:[2,82],55:[2,82],58:[2,82],59:[2,82],60:[2,82],61:[2,82],67:[2,82],71:[2,82]},{15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[1,48],21:[1,49],22:[1,50],23:[1,51],24:[1,52],25:[1,53],26:[1,54],27:[1,55],28:[1,56],29:[1,57],30:[1,58],46:[1,59],51:[1,138]},{5:[2,87],7:[2,87],15:[2,87],16:[2,87],17:[2,87],18:[2,87],19:[2,87],20:[2,87],21:[2,87],22:[2,87],23:[2,87],24:[2,87],25:[2,87],26:[2,87],27:[2,87],28:[2,87],29:[2,87],30:[2,87],34:[2,87],46:[2,87],47:[2,87],50:[2,87],51:[2,87],52:[2,87],55:[2,87],58:[2,87],59:[2,87],60:[2,87],61:[2,87],65:[2,87],66:[2,87],67:[2,87],71:[2,87]},{15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[1,48],21:[1,49],22:[1,50],23:[1,51],24:[1,52],25:[1,53],26:[1,54],27:[1,55],28:[1,56],29:[1,57],30:[1,58],46:[1,59],51:[1,139]},{11:140,16:[1,13],31:[1,37],32:[1,12],33:[1,14],35:15,36:16,37:17,38:18,39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:[1,24],45:25,48:[1,30],50:[1,31],53:[1,32],64:34,69:33,70:[1,35],72:[1,36]},{5:[2,78],7:[2,78],52:[2,78]},{5:[2,72],7:[2,72],52:[2,72],58:[2,72],59:[2,72],60:[2,72],67:[2,72]},{5:[2,48],7:[2,48],15:[2,48],16:[2,48],17:[2,48],18:[2,48],19:[2,48],20:[2,48],21:[2,48],22:[2,48],23:[2,48],24:[2,48],25:[2,48],26:[2,48],27:[2,48],28:[2,48],29:[2,48],30:[2,48],34:[2,48],46:[2,48],47:[2,48],51:[2,48],52:[2,48],55:[2,48],58:[2,48],59:[2,48],60:[2,48],61:[2,48],67:[2,48]},{15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[1,48],21:[1,49],22:[1,50],23:[1,51],24:[1,52],25:[1,53],26:[1,54],27:[1,55],28:[1,56],29:[1,57],30:[1,58],34:[2,53],46:[1,59],51:[2,53],52:[2,53]},{52:[2,57],55:[2,57]},{15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[1,48],21:[1,49],22:[1,50],23:[1,51],24:[1,52],25:[1,53],26:[1,54],27:[1,55],28:[1,56],29:[1,57],30:[1,58],46:[1,59],52:[2,64],55:[2,64]},{15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[1,48],21:[1,49],22:[1,50],23:[1,51],24:[1,52],25:[1,53],26:[1,54],27:[1,55],28:[1,56],29:[1,57],30:[1,58],46:[1,59],52:[2,65],55:[2,65]},{5:[2,83],7:[2,83],15:[2,83],16:[2,83],17:[2,83],18:[2,83],19:[2,83],20:[2,83],21:[2,83],22:[2,83],23:[2,83],24:[2,83],25:[2,83],26:[2,83],27:[2,83],28:[2,83],29:[2,83],30:[2,83],34:[2,83],46:[2,83],47:[2,83],50:[2,83],51:[2,83],52:[2,83],55:[2,83],58:[2,83],59:[2,83],60:[2,83],61:[2,83],67:[2,83],71:[2,83]},{5:[2,88],7:[2,88],15:[2,88],16:[2,88],17:[2,88],18:[2,88],19:[2,88],20:[2,88],21:[2,88],22:[2,88],23:[2,88],24:[2,88],25:[2,88],26:[2,88],27:[2,88],28:[2,88],29:[2,88],30:[2,88],34:[2,88],46:[2,88],47:[2,88],50:[2,88],51:[2,88],52:[2,88],55:[2,88],58:[2,88],59:[2,88],60:[2,88],61:[2,88],65:[2,88],66:[2,88],67:[2,88],71:[2,88]},{5:[2,47],7:[2,47],15:[1,43],16:[1,44],17:[1,45],18:[1,46],19:[1,47],20:[1,48],21:[1,49],22:[1,50],23:[1,51],24:[1,52],25:[1,53],26:[1,54],27:[1,55],28:[1,56],29:[1,57],30:[1,58],34:[2,47],46:[2,47],47:[2,47],51:[2,47],52:[2,47],55:[2,47],58:[2,47],59:[2,47],60:[2,47],61:[2,47],67:[2,47]}],
defaultActions: {38:[2,1],84:[2,58],85:[2,59],86:[2,60],87:[2,61],88:[2,62],89:[2,63]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 39;
break;
case 1:
  yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 40;

break;
case 2:
  yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 40;

break;
case 3:
  yy_.yytext = yy_.yytext.substr(1); return 70;

break;
case 4:
  yy_.yytext = yy_.yytext.substr(1); return 31;

break;
case 5:/* skip whitespace */
break;
case 6:return 30;
break;
case 7:return 44;
break;
case 8:return 43;
break;
case 9:return 41;
break;
case 10:return 42;
break;
case 11:return 12;
break;
case 12:return 58;
break;
case 13:return 59;
break;
case 14:return 60;
break;
case 15:return 67;
break;
case 16:return 61;
break;
case 17:return 7;
break;
case 18:return 72;
break;
case 19:return 65;
break;
case 20:return 66;
break;
case 21:return 20;
break;
case 22:return 21;
break;
case 23:return 32;
break;
case 24:return "IN";
break;
case 25:return 22;
break;
case 26:return 23;
break;
case 27:return 24;
break;
case 28:return 28;
break;
case 29:return 26;
break;
case 30:return 20;
break;
case 31:return 21;
break;
case 32:return 58;
break;
case 33:return 59;
break;
case 34:return 60;
break;
case 35:return 67;
break;
case 36:return 32;
break;
case 37:return 27;
break;
case 38:return 25;
break;
case 39:return 7;
break;
case 40:return 33;
break;
case 41:return 34;
break;
case 42:return 50;
break;
case 43:return 51;
break;
case 44:return 53;
break;
case 45:return 55;
break;
case 46:return 46;
break;
case 47:return 47;
break;
case 48:return 71;
break;
case 49:return 52;
break;
case 50:return 15;
break;
case 51:return 16;
break;
case 52:return 17;
break;
case 53:return 18;
break;
case 54:return 19;
break;
case 55:return 48;
break;
case 56:return 5;
break;
case 57:return 'INVALID';
break;
}
},
rules: [/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))?((?:[eE][-+]?[0-9]+))?\b)/i,/^(?:"(\\x[a-fA-F0-9]{2}|\\u[a-fA-F0-9]{4}|\\[^xu]|[^"(\\)\n])*")/i,/^(?:'(\\['bfvnrt/(\\)]|\\u[a-fA-F0-9]{4}|[^'(\\)])*')/i,/^(?:%[1-9][0-9]*)/i,/^(?:%[A-Za-z_$][A-Za-z_$0-9]*)/i,/^(?:([\s])+)/i,/^(?:as\b)/i,/^(?:undefined\b)/i,/^(?:null\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:where\b)/i,/^(?:select\b)/i,/^(?:contract\b)/i,/^(?:expand\b)/i,/^(?:aggregate\b)/i,/^(?:(order([\s])+)?by\b)/i,/^(?:then\b)/i,/^(?:this\b)/i,/^(?:asc\b)/i,/^(?:desc\b)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:not\b)/i,/^(?:in\b)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=~)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:->)/i,/^(?::>)/i,/^(?:<:)/i,/^(?::=)/i,/^(?:!)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\?)/i,/^(?::)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:[A-Za-z_$][A-Za-z_$0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = objeqParser;
exports.Parser = objeqParser.Parser;
exports.parse = function () { return objeqParser.parse.apply(objeqParser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
