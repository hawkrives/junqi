/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var objeqParser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"query":4,"EOF":5,"filter":6,"step":7,"THEN":8,"WHERE":9,"expr":10,"+":11,"-":12,"*":13,"/":14,"%":15,"AND":16,"OR":17,"EQ":18,"NEQ":19,"RE":20,"GT":21,"GTE":22,"LT":23,"LTE":24,"IN":25,"AS":26,"SYMBOL":27,"NOT":28,"(":29,")":30,"ternary":31,"func":32,"array":33,"obj":34,"NUMBER":35,"STRING":36,"TRUE":37,"FALSE":38,"NULL":39,"UNDEFINED":40,"path":41,"?":42,":":43,"IDENT":44,"expr_list":45,"[":46,"]":47,",":48,"{":49,"obj_items":50,"}":51,"obj_item":52,"obj_non_id":53,"selector":54,"sorter":55,"aggregator":56,"SELECT":57,"CONTRACT":58,"EXPAND":59,"ORDER_BY":60,"order_list":61,"order_spec":62,"local_path":63,"ASC":64,"DESC":65,"AGGREGATE":66,"aggr_list":67,"arg_path":68,"ARGREF":69,".":70,"THIS":71,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"THEN",9:"WHERE",11:"+",12:"-",13:"*",14:"/",15:"%",16:"AND",17:"OR",18:"EQ",19:"NEQ",20:"RE",21:"GT",22:"GTE",23:"LT",24:"LTE",25:"IN",26:"AS",27:"SYMBOL",28:"NOT",29:"(",30:")",35:"NUMBER",36:"STRING",37:"TRUE",38:"FALSE",39:"NULL",40:"UNDEFINED",42:"?",43:":",44:"IDENT",46:"[",47:"]",48:",",49:"{",51:"}",57:"SELECT",58:"CONTRACT",59:"EXPAND",60:"ORDER_BY",64:"ASC",65:"DESC",66:"AGGREGATE",69:"ARGREF",70:".",71:"THIS"},
productions_: [0,[3,2],[4,1],[4,1],[4,3],[4,3],[4,2],[6,2],[6,1],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,3],[10,2],[10,2],[10,3],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[31,5],[32,4],[32,3],[33,3],[33,2],[45,1],[45,3],[34,3],[34,2],[50,1],[50,3],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[52,3],[52,3],[52,1],[7,1],[7,1],[7,1],[54,2],[54,2],[54,2],[55,2],[61,1],[61,3],[62,1],[62,2],[62,2],[56,2],[67,1],[67,3],[41,1],[41,1],[68,1],[68,3],[68,4],[63,1],[63,1],[63,1],[63,3],[63,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = [$$[$0]]; 
break;
case 3: this.$ = [$$[$0]]; 
break;
case 4: this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 5: this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 6: this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 7: this.$ = yy.node('filter', $$[$0]); 
break;
case 8: this.$ = yy.node('filter', $$[$0]); 
break;
case 9: this.$ = yy.node('add', $$[$0-2], $$[$0]); 
break;
case 10: this.$ = yy.node('sub', $$[$0-2], $$[$0]); 
break;
case 11: this.$ = yy.node('mul', $$[$0-2], $$[$0]); 
break;
case 12: this.$ = yy.node('div', $$[$0-2], $$[$0]); 
break;
case 13: this.$ = yy.node('mod', $$[$0-2], $$[$0]); 
break;
case 14: this.$ = yy.node('and', $$[$0-2], $$[$0]); 
break;
case 15: this.$ = yy.node('or', $$[$0-2], $$[$0]); 
break;
case 16: this.$ = yy.node('eq', $$[$0-2], $$[$0]); 
break;
case 17: this.$ = yy.node('neq', $$[$0-2], $$[$0]); 
break;
case 18: this.$ = yy.node('re', $$[$0-2], $$[$0]); 
break;
case 19: this.$ = yy.node('gt', $$[$0-2], $$[$0]); 
break;
case 20: this.$ = yy.node('gte', $$[$0-2], $$[$0]); 
break;
case 21: this.$ = yy.node('lt', $$[$0-2], $$[$0]); 
break;
case 22: this.$ = yy.node('lte', $$[$0-2], $$[$0]); 
break;
case 23: this.$ = yy.node('in', $$[$0-2], $$[$0]); 
break;
case 24: this.$ = yy.node('as', $$[$0-2], $$[$0]); 
break;
case 25: this.$ = yy.node('not', $$[$0]); 
break;
case 26: this.$ = yy.node('neg', $$[$0]); 
break;
case 27: this.$ = $$[$0-1]; 
break;
case 32: this.$ = Number(yytext); 
break;
case 33: this.$ = yytext; 
break;
case 34: this.$ = true; 
break;
case 35: this.$ = false; 
break;
case 36: this.$ = null; 
break;
case 37: this.$ = undefined; 
break;
case 39: this.$ = yy.node('tern', $$[$0-4], $$[$0-2], $$[$0]); 
break;
case 40: this.$ = yy.node('func', $$[$0-3], $$[$0-1]); 
break;
case 41: this.$ = yy.node('func', $$[$0-2], []); 
break;
case 42: this.$ = yy.node('arr', $$[$0-1]); 
break;
case 43: this.$ = yy.node('arr', []); 
break;
case 44: this.$ = [$$[$0]]; 
break;
case 45: this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 46: this.$ = yy.node('obj', $$[$0-1]); 
break;
case 47: this.$ = yy.node('obj', {}); 
break;
case 48: this.$ = {}; this.$[$$[$0][0]] = $$[$0][1]; 
break;
case 49: this.$ = $$[$0-2]; this.$[$$[$0][0]] = $$[$0][1]; 
break;
case 56: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 57: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 58: this.$ = [$$[$0], yy.path('local', $$[$0])]; 
break;
case 62: this.$ = yy.node('select', $$[$0]); 
break;
case 63: this.$ = yy.node('contract', $$[$0]); 
break;
case 64: this.$ = yy.node('expand', $$[$0]); 
break;
case 65: this.$ = yy.node('sort', $$[$0]); 
break;
case 66: this.$ = [$$[$0]]; 
break;
case 67: this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 68: this.$ = { path: $$[$0], ascending: true }; 
break;
case 69: this.$ = { path: $$[$0-1], ascending: true }; 
break;
case 70: this.$ = { path: $$[$0-1] }; 
break;
case 71: this.$ = yy.node('aggregate', $$[$0]); 
break;
case 72: this.$ = [$$[$0]]; 
break;
case 73: this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 76: this.$ = yy.path('arg', Number($$[$0])-1); 
break;
case 77: this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 78: this.$ = $$[$0-3]; $$[$0-3].push($$[$0-1]); 
break;
case 79: this.$ = yy.path('local'); 
break;
case 80: this.$ = yy.path('local', $$[$0]); 
break;
case 81: this.$ = yy.path('symbol', $$[$0]); 
break;
case 82: this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 83: this.$ = $$[$0-3]; $$[$0-3].push($$[$0-1]); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:[1,5],10:6,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],54:7,55:8,56:9,57:[1,24],58:[1,25],59:[1,26],60:[1,27],63:33,66:[1,28],68:32,69:[1,34],71:[1,35]},{1:[3]},{5:[1,37],7:39,8:[1,38],54:7,55:8,56:9,57:[1,24],58:[1,25],59:[1,26],60:[1,27],66:[1,28]},{5:[2,2],8:[2,2],57:[2,2],58:[2,2],59:[2,2],60:[2,2],66:[2,2]},{5:[2,3],8:[2,3],57:[2,3],58:[2,3],59:[2,3],60:[2,3],66:[2,3]},{10:40,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{5:[2,8],8:[2,8],11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[1,46],17:[1,47],18:[1,48],19:[1,49],20:[1,50],21:[1,51],22:[1,52],23:[1,53],24:[1,54],25:[1,55],26:[1,56],42:[1,57],57:[2,8],58:[2,8],59:[2,8],60:[2,8],66:[2,8]},{5:[2,59],8:[2,59],57:[2,59],58:[2,59],59:[2,59],60:[2,59],66:[2,59]},{5:[2,60],8:[2,60],57:[2,60],58:[2,60],59:[2,60],60:[2,60],66:[2,60]},{5:[2,61],8:[2,61],57:[2,61],58:[2,61],59:[2,61],60:[2,61],66:[2,61]},{10:58,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{10:59,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{10:60,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{5:[2,28],8:[2,28],11:[2,28],12:[2,28],13:[2,28],14:[2,28],15:[2,28],16:[2,28],17:[2,28],18:[2,28],19:[2,28],20:[2,28],21:[2,28],22:[2,28],23:[2,28],24:[2,28],25:[2,28],26:[2,28],30:[2,28],42:[2,28],43:[2,28],47:[2,28],48:[2,28],51:[2,28],57:[2,28],58:[2,28],59:[2,28],60:[2,28],66:[2,28]},{5:[2,29],8:[2,29],11:[2,29],12:[2,29],13:[2,29],14:[2,29],15:[2,29],16:[2,29],17:[2,29],18:[2,29],19:[2,29],20:[2,29],21:[2,29],22:[2,29],23:[2,29],24:[2,29],25:[2,29],26:[2,29],30:[2,29],42:[2,29],43:[2,29],47:[2,29],48:[2,29],51:[2,29],57:[2,29],58:[2,29],59:[2,29],60:[2,29],66:[2,29]},{5:[2,30],8:[2,30],11:[2,30],12:[2,30],13:[2,30],14:[2,30],15:[2,30],16:[2,30],17:[2,30],18:[2,30],19:[2,30],20:[2,30],21:[2,30],22:[2,30],23:[2,30],24:[2,30],25:[2,30],26:[2,30],30:[2,30],42:[2,30],43:[2,30],47:[2,30],48:[2,30],51:[2,30],57:[2,30],58:[2,30],59:[2,30],60:[2,30],66:[2,30]},{5:[2,31],8:[2,31],11:[2,31],12:[2,31],13:[2,31],14:[2,31],15:[2,31],16:[2,31],17:[2,31],18:[2,31],19:[2,31],20:[2,31],21:[2,31],22:[2,31],23:[2,31],24:[2,31],25:[2,31],26:[2,31],30:[2,31],42:[2,31],43:[2,31],47:[2,31],48:[2,31],51:[2,31],57:[2,31],58:[2,31],59:[2,31],60:[2,31],66:[2,31]},{5:[2,32],8:[2,32],11:[2,32],12:[2,32],13:[2,32],14:[2,32],15:[2,32],16:[2,32],17:[2,32],18:[2,32],19:[2,32],20:[2,32],21:[2,32],22:[2,32],23:[2,32],24:[2,32],25:[2,32],26:[2,32],30:[2,32],42:[2,32],43:[2,32],47:[2,32],48:[2,32],51:[2,32],57:[2,32],58:[2,32],59:[2,32],60:[2,32],66:[2,32]},{5:[2,33],8:[2,33],11:[2,33],12:[2,33],13:[2,33],14:[2,33],15:[2,33],16:[2,33],17:[2,33],18:[2,33],19:[2,33],20:[2,33],21:[2,33],22:[2,33],23:[2,33],24:[2,33],25:[2,33],26:[2,33],30:[2,33],42:[2,33],43:[2,33],47:[2,33],48:[2,33],51:[2,33],57:[2,33],58:[2,33],59:[2,33],60:[2,33],66:[2,33]},{5:[2,34],8:[2,34],11:[2,34],12:[2,34],13:[2,34],14:[2,34],15:[2,34],16:[2,34],17:[2,34],18:[2,34],19:[2,34],20:[2,34],21:[2,34],22:[2,34],23:[2,34],24:[2,34],25:[2,34],26:[2,34],30:[2,34],42:[2,34],43:[2,34],47:[2,34],48:[2,34],51:[2,34],57:[2,34],58:[2,34],59:[2,34],60:[2,34],66:[2,34]},{5:[2,35],8:[2,35],11:[2,35],12:[2,35],13:[2,35],14:[2,35],15:[2,35],16:[2,35],17:[2,35],18:[2,35],19:[2,35],20:[2,35],21:[2,35],22:[2,35],23:[2,35],24:[2,35],25:[2,35],26:[2,35],30:[2,35],42:[2,35],43:[2,35],47:[2,35],48:[2,35],51:[2,35],57:[2,35],58:[2,35],59:[2,35],60:[2,35],66:[2,35]},{5:[2,36],8:[2,36],11:[2,36],12:[2,36],13:[2,36],14:[2,36],15:[2,36],16:[2,36],17:[2,36],18:[2,36],19:[2,36],20:[2,36],21:[2,36],22:[2,36],23:[2,36],24:[2,36],25:[2,36],26:[2,36],30:[2,36],42:[2,36],43:[2,36],47:[2,36],48:[2,36],51:[2,36],57:[2,36],58:[2,36],59:[2,36],60:[2,36],66:[2,36]},{5:[2,37],8:[2,37],11:[2,37],12:[2,37],13:[2,37],14:[2,37],15:[2,37],16:[2,37],17:[2,37],18:[2,37],19:[2,37],20:[2,37],21:[2,37],22:[2,37],23:[2,37],24:[2,37],25:[2,37],26:[2,37],30:[2,37],42:[2,37],43:[2,37],47:[2,37],48:[2,37],51:[2,37],57:[2,37],58:[2,37],59:[2,37],60:[2,37],66:[2,37]},{5:[2,38],8:[2,38],11:[2,38],12:[2,38],13:[2,38],14:[2,38],15:[2,38],16:[2,38],17:[2,38],18:[2,38],19:[2,38],20:[2,38],21:[2,38],22:[2,38],23:[2,38],24:[2,38],25:[2,38],26:[2,38],30:[2,38],42:[2,38],43:[2,38],47:[2,38],48:[2,38],51:[2,38],57:[2,38],58:[2,38],59:[2,38],60:[2,38],66:[2,38]},{10:61,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{10:62,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{10:63,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{27:[1,36],44:[1,67],61:64,62:65,63:66,71:[1,35]},{44:[1,69],67:68},{5:[2,80],8:[2,80],11:[2,80],12:[2,80],13:[2,80],14:[2,80],15:[2,80],16:[2,80],17:[2,80],18:[2,80],19:[2,80],20:[2,80],21:[2,80],22:[2,80],23:[2,80],24:[2,80],25:[2,80],26:[2,80],29:[1,70],30:[2,80],42:[2,80],43:[2,80],46:[2,80],47:[2,80],48:[2,80],51:[2,80],57:[2,80],58:[2,80],59:[2,80],60:[2,80],66:[2,80],70:[2,80]},{10:73,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],45:71,46:[1,30],47:[1,72],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{35:[1,79],36:[1,80],37:[1,81],38:[1,82],39:[1,83],40:[1,84],44:[1,78],50:74,51:[1,75],52:76,53:77},{5:[2,74],8:[2,74],11:[2,74],12:[2,74],13:[2,74],14:[2,74],15:[2,74],16:[2,74],17:[2,74],18:[2,74],19:[2,74],20:[2,74],21:[2,74],22:[2,74],23:[2,74],24:[2,74],25:[2,74],26:[2,74],30:[2,74],42:[2,74],43:[2,74],46:[1,86],47:[2,74],48:[2,74],51:[2,74],57:[2,74],58:[2,74],59:[2,74],60:[2,74],66:[2,74],70:[1,85]},{5:[2,75],8:[2,75],11:[2,75],12:[2,75],13:[2,75],14:[2,75],15:[2,75],16:[2,75],17:[2,75],18:[2,75],19:[2,75],20:[2,75],21:[2,75],22:[2,75],23:[2,75],24:[2,75],25:[2,75],26:[2,75],30:[2,75],42:[2,75],43:[2,75],46:[1,88],47:[2,75],48:[2,75],51:[2,75],57:[2,75],58:[2,75],59:[2,75],60:[2,75],66:[2,75],70:[1,87]},{5:[2,76],8:[2,76],11:[2,76],12:[2,76],13:[2,76],14:[2,76],15:[2,76],16:[2,76],17:[2,76],18:[2,76],19:[2,76],20:[2,76],21:[2,76],22:[2,76],23:[2,76],24:[2,76],25:[2,76],26:[2,76],30:[2,76],42:[2,76],43:[2,76],46:[2,76],47:[2,76],48:[2,76],51:[2,76],57:[2,76],58:[2,76],59:[2,76],60:[2,76],66:[2,76],70:[2,76]},{5:[2,79],8:[2,79],11:[2,79],12:[2,79],13:[2,79],14:[2,79],15:[2,79],16:[2,79],17:[2,79],18:[2,79],19:[2,79],20:[2,79],21:[2,79],22:[2,79],23:[2,79],24:[2,79],25:[2,79],26:[2,79],30:[2,79],42:[2,79],43:[2,79],46:[2,79],47:[2,79],48:[2,79],51:[2,79],57:[2,79],58:[2,79],59:[2,79],60:[2,79],64:[2,79],65:[2,79],66:[2,79],70:[2,79]},{5:[2,81],8:[2,81],11:[2,81],12:[2,81],13:[2,81],14:[2,81],15:[2,81],16:[2,81],17:[2,81],18:[2,81],19:[2,81],20:[2,81],21:[2,81],22:[2,81],23:[2,81],24:[2,81],25:[2,81],26:[2,81],30:[2,81],42:[2,81],43:[2,81],46:[2,81],47:[2,81],48:[2,81],51:[2,81],57:[2,81],58:[2,81],59:[2,81],60:[2,81],64:[2,81],65:[2,81],66:[2,81],70:[2,81]},{1:[2,1]},{6:89,7:90,9:[1,5],10:6,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],54:7,55:8,56:9,57:[1,24],58:[1,25],59:[1,26],60:[1,27],63:33,66:[1,28],68:32,69:[1,34],71:[1,35]},{5:[2,6],8:[2,6],57:[2,6],58:[2,6],59:[2,6],60:[2,6],66:[2,6]},{5:[2,7],8:[2,7],11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[1,46],17:[1,47],18:[1,48],19:[1,49],20:[1,50],21:[1,51],22:[1,52],23:[1,53],24:[1,54],25:[1,55],26:[1,56],42:[1,57],57:[2,7],58:[2,7],59:[2,7],60:[2,7],66:[2,7]},{10:91,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{10:92,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{10:93,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{10:94,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{10:95,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{10:96,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{10:97,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{10:98,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{10:99,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{10:100,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{10:101,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{10:102,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{10:103,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{10:104,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{10:105,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{27:[1,106]},{10:107,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{5:[2,25],8:[2,25],11:[2,25],12:[2,25],13:[2,25],14:[2,25],15:[2,25],16:[2,25],17:[2,25],18:[2,25],19:[2,25],20:[2,25],21:[2,25],22:[2,25],23:[2,25],24:[2,25],25:[2,25],26:[1,56],30:[2,25],42:[2,25],43:[2,25],47:[2,25],48:[2,25],51:[2,25],57:[2,25],58:[2,25],59:[2,25],60:[2,25],66:[2,25]},{5:[2,26],8:[2,26],11:[2,26],12:[2,26],13:[2,26],14:[2,26],15:[2,26],16:[2,26],17:[2,26],18:[2,26],19:[2,26],20:[2,26],21:[2,26],22:[2,26],23:[2,26],24:[2,26],25:[2,26],26:[1,56],30:[2,26],42:[2,26],43:[2,26],47:[2,26],48:[2,26],51:[2,26],57:[2,26],58:[2,26],59:[2,26],60:[2,26],66:[2,26]},{11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[1,46],17:[1,47],18:[1,48],19:[1,49],20:[1,50],21:[1,51],22:[1,52],23:[1,53],24:[1,54],25:[1,55],26:[1,56],30:[1,108],42:[1,57]},{5:[2,62],8:[2,62],11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[1,46],17:[1,47],18:[1,48],19:[1,49],20:[1,50],21:[1,51],22:[1,52],23:[1,53],24:[1,54],25:[1,55],26:[1,56],42:[1,57],57:[2,62],58:[2,62],59:[2,62],60:[2,62],66:[2,62]},{5:[2,63],8:[2,63],11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[1,46],17:[1,47],18:[1,48],19:[1,49],20:[1,50],21:[1,51],22:[1,52],23:[1,53],24:[1,54],25:[1,55],26:[1,56],42:[1,57],57:[2,63],58:[2,63],59:[2,63],60:[2,63],66:[2,63]},{5:[2,64],8:[2,64],11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[1,46],17:[1,47],18:[1,48],19:[1,49],20:[1,50],21:[1,51],22:[1,52],23:[1,53],24:[1,54],25:[1,55],26:[1,56],42:[1,57],57:[2,64],58:[2,64],59:[2,64],60:[2,64],66:[2,64]},{5:[2,65],8:[2,65],48:[1,109],57:[2,65],58:[2,65],59:[2,65],60:[2,65],66:[2,65]},{5:[2,66],8:[2,66],48:[2,66],57:[2,66],58:[2,66],59:[2,66],60:[2,66],66:[2,66]},{5:[2,68],8:[2,68],46:[1,88],48:[2,68],57:[2,68],58:[2,68],59:[2,68],60:[2,68],64:[1,110],65:[1,111],66:[2,68],70:[1,87]},{5:[2,80],8:[2,80],46:[2,80],48:[2,80],57:[2,80],58:[2,80],59:[2,80],60:[2,80],64:[2,80],65:[2,80],66:[2,80],70:[2,80]},{5:[2,71],8:[2,71],48:[1,112],57:[2,71],58:[2,71],59:[2,71],60:[2,71],66:[2,71]},{5:[2,72],8:[2,72],48:[2,72],57:[2,72],58:[2,72],59:[2,72],60:[2,72],66:[2,72]},{10:73,12:[1,11],27:[1,36],28:[1,10],29:[1,12],30:[1,114],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],45:113,46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{47:[1,115],48:[1,116]},{5:[2,43],8:[2,43],11:[2,43],12:[2,43],13:[2,43],14:[2,43],15:[2,43],16:[2,43],17:[2,43],18:[2,43],19:[2,43],20:[2,43],21:[2,43],22:[2,43],23:[2,43],24:[2,43],25:[2,43],26:[2,43],30:[2,43],42:[2,43],43:[2,43],47:[2,43],48:[2,43],51:[2,43],57:[2,43],58:[2,43],59:[2,43],60:[2,43],66:[2,43]},{11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[1,46],17:[1,47],18:[1,48],19:[1,49],20:[1,50],21:[1,51],22:[1,52],23:[1,53],24:[1,54],25:[1,55],26:[1,56],30:[2,44],42:[1,57],47:[2,44],48:[2,44]},{48:[1,118],51:[1,117]},{5:[2,47],8:[2,47],11:[2,47],12:[2,47],13:[2,47],14:[2,47],15:[2,47],16:[2,47],17:[2,47],18:[2,47],19:[2,47],20:[2,47],21:[2,47],22:[2,47],23:[2,47],24:[2,47],25:[2,47],26:[2,47],30:[2,47],42:[2,47],43:[2,47],47:[2,47],48:[2,47],51:[2,47],57:[2,47],58:[2,47],59:[2,47],60:[2,47],66:[2,47]},{48:[2,48],51:[2,48]},{43:[1,119]},{43:[1,120],48:[2,58],51:[2,58]},{43:[2,50]},{43:[2,51]},{43:[2,52]},{43:[2,53]},{43:[2,54]},{43:[2,55]},{44:[1,121]},{10:122,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{44:[1,123]},{10:124,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{5:[2,4],8:[2,4],57:[2,4],58:[2,4],59:[2,4],60:[2,4],66:[2,4]},{5:[2,5],8:[2,5],57:[2,5],58:[2,5],59:[2,5],60:[2,5],66:[2,5]},{5:[2,9],8:[2,9],11:[2,9],12:[2,9],13:[1,43],14:[1,44],15:[1,45],16:[2,9],17:[2,9],18:[2,9],19:[2,9],20:[2,9],21:[2,9],22:[2,9],23:[2,9],24:[2,9],25:[2,9],26:[1,56],30:[2,9],42:[2,9],43:[2,9],47:[2,9],48:[2,9],51:[2,9],57:[2,9],58:[2,9],59:[2,9],60:[2,9],66:[2,9]},{5:[2,10],8:[2,10],11:[2,10],12:[2,10],13:[1,43],14:[1,44],15:[1,45],16:[2,10],17:[2,10],18:[2,10],19:[2,10],20:[2,10],21:[2,10],22:[2,10],23:[2,10],24:[2,10],25:[2,10],26:[1,56],30:[2,10],42:[2,10],43:[2,10],47:[2,10],48:[2,10],51:[2,10],57:[2,10],58:[2,10],59:[2,10],60:[2,10],66:[2,10]},{5:[2,11],8:[2,11],11:[2,11],12:[2,11],13:[2,11],14:[2,11],15:[2,11],16:[2,11],17:[2,11],18:[2,11],19:[2,11],20:[2,11],21:[2,11],22:[2,11],23:[2,11],24:[2,11],25:[2,11],26:[1,56],30:[2,11],42:[2,11],43:[2,11],47:[2,11],48:[2,11],51:[2,11],57:[2,11],58:[2,11],59:[2,11],60:[2,11],66:[2,11]},{5:[2,12],8:[2,12],11:[2,12],12:[2,12],13:[2,12],14:[2,12],15:[2,12],16:[2,12],17:[2,12],18:[2,12],19:[2,12],20:[2,12],21:[2,12],22:[2,12],23:[2,12],24:[2,12],25:[2,12],26:[1,56],30:[2,12],42:[2,12],43:[2,12],47:[2,12],48:[2,12],51:[2,12],57:[2,12],58:[2,12],59:[2,12],60:[2,12],66:[2,12]},{5:[2,13],8:[2,13],11:[2,13],12:[2,13],13:[2,13],14:[2,13],15:[2,13],16:[2,13],17:[2,13],18:[2,13],19:[2,13],20:[2,13],21:[2,13],22:[2,13],23:[2,13],24:[2,13],25:[2,13],26:[1,56],30:[2,13],42:[2,13],43:[2,13],47:[2,13],48:[2,13],51:[2,13],57:[2,13],58:[2,13],59:[2,13],60:[2,13],66:[2,13]},{5:[2,14],8:[2,14],11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[2,14],17:[2,14],18:[1,48],19:[1,49],20:[1,50],21:[1,51],22:[1,52],23:[1,53],24:[1,54],25:[1,55],26:[1,56],30:[2,14],42:[2,14],43:[2,14],47:[2,14],48:[2,14],51:[2,14],57:[2,14],58:[2,14],59:[2,14],60:[2,14],66:[2,14]},{5:[2,15],8:[2,15],11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[1,46],17:[2,15],18:[1,48],19:[1,49],20:[1,50],21:[1,51],22:[1,52],23:[1,53],24:[1,54],25:[1,55],26:[1,56],30:[2,15],42:[2,15],43:[2,15],47:[2,15],48:[2,15],51:[2,15],57:[2,15],58:[2,15],59:[2,15],60:[2,15],66:[2,15]},{5:[2,16],8:[2,16],11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[2,16],17:[2,16],18:[2,16],19:[2,16],20:[2,16],21:[1,51],22:[1,52],23:[1,53],24:[1,54],25:[2,16],26:[1,56],30:[2,16],42:[2,16],43:[2,16],47:[2,16],48:[2,16],51:[2,16],57:[2,16],58:[2,16],59:[2,16],60:[2,16],66:[2,16]},{5:[2,17],8:[2,17],11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[2,17],17:[2,17],18:[2,17],19:[2,17],20:[2,17],21:[1,51],22:[1,52],23:[1,53],24:[1,54],25:[2,17],26:[1,56],30:[2,17],42:[2,17],43:[2,17],47:[2,17],48:[2,17],51:[2,17],57:[2,17],58:[2,17],59:[2,17],60:[2,17],66:[2,17]},{5:[2,18],8:[2,18],11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[2,18],17:[2,18],18:[2,18],19:[2,18],20:[2,18],21:[1,51],22:[1,52],23:[1,53],24:[1,54],25:[2,18],26:[1,56],30:[2,18],42:[2,18],43:[2,18],47:[2,18],48:[2,18],51:[2,18],57:[2,18],58:[2,18],59:[2,18],60:[2,18],66:[2,18]},{5:[2,19],8:[2,19],11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[2,19],17:[2,19],18:[2,19],19:[2,19],20:[2,19],21:[2,19],22:[2,19],23:[2,19],24:[2,19],25:[2,19],26:[1,56],30:[2,19],42:[2,19],43:[2,19],47:[2,19],48:[2,19],51:[2,19],57:[2,19],58:[2,19],59:[2,19],60:[2,19],66:[2,19]},{5:[2,20],8:[2,20],11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[2,20],17:[2,20],18:[2,20],19:[2,20],20:[2,20],21:[2,20],22:[2,20],23:[2,20],24:[2,20],25:[2,20],26:[1,56],30:[2,20],42:[2,20],43:[2,20],47:[2,20],48:[2,20],51:[2,20],57:[2,20],58:[2,20],59:[2,20],60:[2,20],66:[2,20]},{5:[2,21],8:[2,21],11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[2,21],17:[2,21],18:[2,21],19:[2,21],20:[2,21],21:[2,21],22:[2,21],23:[2,21],24:[2,21],25:[2,21],26:[1,56],30:[2,21],42:[2,21],43:[2,21],47:[2,21],48:[2,21],51:[2,21],57:[2,21],58:[2,21],59:[2,21],60:[2,21],66:[2,21]},{5:[2,22],8:[2,22],11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[2,22],17:[2,22],18:[2,22],19:[2,22],20:[2,22],21:[2,22],22:[2,22],23:[2,22],24:[2,22],25:[2,22],26:[1,56],30:[2,22],42:[2,22],43:[2,22],47:[2,22],48:[2,22],51:[2,22],57:[2,22],58:[2,22],59:[2,22],60:[2,22],66:[2,22]},{5:[2,23],8:[2,23],11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[2,23],17:[2,23],18:[2,23],19:[2,23],20:[2,23],21:[1,51],22:[1,52],23:[1,53],24:[1,54],25:[2,23],26:[1,56],30:[2,23],42:[2,23],43:[2,23],47:[2,23],48:[2,23],51:[2,23],57:[2,23],58:[2,23],59:[2,23],60:[2,23],66:[2,23]},{5:[2,24],8:[2,24],11:[2,24],12:[2,24],13:[2,24],14:[2,24],15:[2,24],16:[2,24],17:[2,24],18:[2,24],19:[2,24],20:[2,24],21:[2,24],22:[2,24],23:[2,24],24:[2,24],25:[2,24],26:[2,24],30:[2,24],42:[2,24],43:[2,24],47:[2,24],48:[2,24],51:[2,24],57:[2,24],58:[2,24],59:[2,24],60:[2,24],66:[2,24]},{11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[1,46],17:[1,47],18:[1,48],19:[1,49],20:[1,50],21:[1,51],22:[1,52],23:[1,53],24:[1,54],25:[1,55],26:[1,56],42:[1,57],43:[1,125]},{5:[2,27],8:[2,27],11:[2,27],12:[2,27],13:[2,27],14:[2,27],15:[2,27],16:[2,27],17:[2,27],18:[2,27],19:[2,27],20:[2,27],21:[2,27],22:[2,27],23:[2,27],24:[2,27],25:[2,27],26:[2,27],30:[2,27],42:[2,27],43:[2,27],47:[2,27],48:[2,27],51:[2,27],57:[2,27],58:[2,27],59:[2,27],60:[2,27],66:[2,27]},{27:[1,36],44:[1,67],62:126,63:66,71:[1,35]},{5:[2,69],8:[2,69],48:[2,69],57:[2,69],58:[2,69],59:[2,69],60:[2,69],66:[2,69]},{5:[2,70],8:[2,70],48:[2,70],57:[2,70],58:[2,70],59:[2,70],60:[2,70],66:[2,70]},{44:[1,127]},{30:[1,128],48:[1,116]},{5:[2,41],8:[2,41],11:[2,41],12:[2,41],13:[2,41],14:[2,41],15:[2,41],16:[2,41],17:[2,41],18:[2,41],19:[2,41],20:[2,41],21:[2,41],22:[2,41],23:[2,41],24:[2,41],25:[2,41],26:[2,41],30:[2,41],42:[2,41],43:[2,41],47:[2,41],48:[2,41],51:[2,41],57:[2,41],58:[2,41],59:[2,41],60:[2,41],66:[2,41]},{5:[2,42],8:[2,42],11:[2,42],12:[2,42],13:[2,42],14:[2,42],15:[2,42],16:[2,42],17:[2,42],18:[2,42],19:[2,42],20:[2,42],21:[2,42],22:[2,42],23:[2,42],24:[2,42],25:[2,42],26:[2,42],30:[2,42],42:[2,42],43:[2,42],47:[2,42],48:[2,42],51:[2,42],57:[2,42],58:[2,42],59:[2,42],60:[2,42],66:[2,42]},{10:129,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{5:[2,46],8:[2,46],11:[2,46],12:[2,46],13:[2,46],14:[2,46],15:[2,46],16:[2,46],17:[2,46],18:[2,46],19:[2,46],20:[2,46],21:[2,46],22:[2,46],23:[2,46],24:[2,46],25:[2,46],26:[2,46],30:[2,46],42:[2,46],43:[2,46],47:[2,46],48:[2,46],51:[2,46],57:[2,46],58:[2,46],59:[2,46],60:[2,46],66:[2,46]},{35:[1,79],36:[1,80],37:[1,81],38:[1,82],39:[1,83],40:[1,84],44:[1,78],52:130,53:77},{10:131,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{10:132,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{5:[2,77],8:[2,77],11:[2,77],12:[2,77],13:[2,77],14:[2,77],15:[2,77],16:[2,77],17:[2,77],18:[2,77],19:[2,77],20:[2,77],21:[2,77],22:[2,77],23:[2,77],24:[2,77],25:[2,77],26:[2,77],30:[2,77],42:[2,77],43:[2,77],46:[2,77],47:[2,77],48:[2,77],51:[2,77],57:[2,77],58:[2,77],59:[2,77],60:[2,77],66:[2,77],70:[2,77]},{11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[1,46],17:[1,47],18:[1,48],19:[1,49],20:[1,50],21:[1,51],22:[1,52],23:[1,53],24:[1,54],25:[1,55],26:[1,56],42:[1,57],47:[1,133]},{5:[2,82],8:[2,82],11:[2,82],12:[2,82],13:[2,82],14:[2,82],15:[2,82],16:[2,82],17:[2,82],18:[2,82],19:[2,82],20:[2,82],21:[2,82],22:[2,82],23:[2,82],24:[2,82],25:[2,82],26:[2,82],30:[2,82],42:[2,82],43:[2,82],46:[2,82],47:[2,82],48:[2,82],51:[2,82],57:[2,82],58:[2,82],59:[2,82],60:[2,82],64:[2,82],65:[2,82],66:[2,82],70:[2,82]},{11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[1,46],17:[1,47],18:[1,48],19:[1,49],20:[1,50],21:[1,51],22:[1,52],23:[1,53],24:[1,54],25:[1,55],26:[1,56],42:[1,57],47:[1,134]},{10:135,12:[1,11],27:[1,36],28:[1,10],29:[1,12],31:13,32:14,33:15,34:16,35:[1,17],36:[1,18],37:[1,19],38:[1,20],39:[1,21],40:[1,22],41:23,44:[1,29],46:[1,30],49:[1,31],63:33,68:32,69:[1,34],71:[1,35]},{5:[2,67],8:[2,67],48:[2,67],57:[2,67],58:[2,67],59:[2,67],60:[2,67],66:[2,67]},{5:[2,73],8:[2,73],48:[2,73],57:[2,73],58:[2,73],59:[2,73],60:[2,73],66:[2,73]},{5:[2,40],8:[2,40],11:[2,40],12:[2,40],13:[2,40],14:[2,40],15:[2,40],16:[2,40],17:[2,40],18:[2,40],19:[2,40],20:[2,40],21:[2,40],22:[2,40],23:[2,40],24:[2,40],25:[2,40],26:[2,40],30:[2,40],42:[2,40],43:[2,40],47:[2,40],48:[2,40],51:[2,40],57:[2,40],58:[2,40],59:[2,40],60:[2,40],66:[2,40]},{11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[1,46],17:[1,47],18:[1,48],19:[1,49],20:[1,50],21:[1,51],22:[1,52],23:[1,53],24:[1,54],25:[1,55],26:[1,56],30:[2,45],42:[1,57],47:[2,45],48:[2,45]},{48:[2,49],51:[2,49]},{11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[1,46],17:[1,47],18:[1,48],19:[1,49],20:[1,50],21:[1,51],22:[1,52],23:[1,53],24:[1,54],25:[1,55],26:[1,56],42:[1,57],48:[2,56],51:[2,56]},{11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[1,46],17:[1,47],18:[1,48],19:[1,49],20:[1,50],21:[1,51],22:[1,52],23:[1,53],24:[1,54],25:[1,55],26:[1,56],42:[1,57],48:[2,57],51:[2,57]},{5:[2,78],8:[2,78],11:[2,78],12:[2,78],13:[2,78],14:[2,78],15:[2,78],16:[2,78],17:[2,78],18:[2,78],19:[2,78],20:[2,78],21:[2,78],22:[2,78],23:[2,78],24:[2,78],25:[2,78],26:[2,78],30:[2,78],42:[2,78],43:[2,78],46:[2,78],47:[2,78],48:[2,78],51:[2,78],57:[2,78],58:[2,78],59:[2,78],60:[2,78],66:[2,78],70:[2,78]},{5:[2,83],8:[2,83],11:[2,83],12:[2,83],13:[2,83],14:[2,83],15:[2,83],16:[2,83],17:[2,83],18:[2,83],19:[2,83],20:[2,83],21:[2,83],22:[2,83],23:[2,83],24:[2,83],25:[2,83],26:[2,83],30:[2,83],42:[2,83],43:[2,83],46:[2,83],47:[2,83],48:[2,83],51:[2,83],57:[2,83],58:[2,83],59:[2,83],60:[2,83],64:[2,83],65:[2,83],66:[2,83],70:[2,83]},{5:[2,39],8:[2,39],11:[1,41],12:[1,42],13:[1,43],14:[1,44],15:[1,45],16:[1,46],17:[1,47],18:[1,48],19:[1,49],20:[1,50],21:[1,51],22:[1,52],23:[1,53],24:[1,54],25:[1,55],26:[1,56],30:[2,39],42:[2,39],43:[2,39],47:[2,39],48:[2,39],51:[2,39],57:[2,39],58:[2,39],59:[2,39],60:[2,39],66:[2,39]}],
defaultActions: {37:[2,1],79:[2,50],80:[2,51],81:[2,52],82:[2,53],83:[2,54],84:[2,55]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 35;
break;
case 1:
  yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 36;

break;
case 2:
  yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 36;

break;
case 3:
  yy_.yytext = yy_.yytext.substr(1); return 69;

break;
case 4:
  yy_.yytext = yy_.yytext.substr(1); return 27;

break;
case 5:/* skip whitespace */
break;
case 6:return 26;
break;
case 7:return 40;
break;
case 8:return 39;
break;
case 9:return 37;
break;
case 10:return 38;
break;
case 11:return 9;
break;
case 12:return 57;
break;
case 13:return 58;
break;
case 14:return 59;
break;
case 15:return 66;
break;
case 16:return 60;
break;
case 17:return 8;
break;
case 18:return 71;
break;
case 19:return 64;
break;
case 20:return 65;
break;
case 21:return 16;
break;
case 22:return 17;
break;
case 23:return 28;
break;
case 24:return "IN";
break;
case 25:return 18;
break;
case 26:return 19;
break;
case 27:return 20;
break;
case 28:return 24;
break;
case 29:return 22;
break;
case 30:return 16;
break;
case 31:return 17;
break;
case 32:return 57;
break;
case 33:return 58;
break;
case 34:return 59;
break;
case 35:return 66;
break;
case 36:return 28;
break;
case 37:return 23;
break;
case 38:return 21;
break;
case 39:return 8;
break;
case 40:return 29;
break;
case 41:return 30;
break;
case 42:return 46;
break;
case 43:return 47;
break;
case 44:return 49;
break;
case 45:return 51;
break;
case 46:return 42;
break;
case 47:return 43;
break;
case 48:return 70;
break;
case 49:return 48;
break;
case 50:return 11;
break;
case 51:return 12;
break;
case 52:return 13;
break;
case 53:return 14;
break;
case 54:return 15;
break;
case 55:return 44;
break;
case 56:return 5;
break;
case 57:return 'INVALID';
break;
}
},
rules: [/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))?((?:[eE][-+]?[0-9]+))?\b)/i,/^(?:"(\\x[a-fA-F0-9]{2}|\\u[a-fA-F0-9]{4}|\\[^xu]|[^"(\\)\n])*")/i,/^(?:'(\\['bfvnrt/(\\)]|\\u[a-fA-F0-9]{4}|[^'(\\)])*')/i,/^(?:%[1-9][0-9]*)/i,/^(?:%[A-Za-z_$][A-Za-z_$0-9]*)/i,/^(?:([\s])+)/i,/^(?:as\b)/i,/^(?:undefined\b)/i,/^(?:null\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:where\b)/i,/^(?:select\b)/i,/^(?:contract\b)/i,/^(?:expand\b)/i,/^(?:aggregate\b)/i,/^(?:(order([\s])+)?by\b)/i,/^(?:then\b)/i,/^(?:this\b)/i,/^(?:asc\b)/i,/^(?:desc\b)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:not\b)/i,/^(?:in\b)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=~)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:->)/i,/^(?::>)/i,/^(?:<:)/i,/^(?::=)/i,/^(?:!)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\?)/i,/^(?::)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:[A-Za-z_$][A-Za-z_$0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = objeqParser;
exports.Parser = objeqParser.Parser;
exports.parse = function () { return objeqParser.parse.apply(objeqParser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}