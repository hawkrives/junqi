/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var objeqParser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"query":4,"EOF":5,"leading_step":6,"trailing_step":7,"leading_filter":8,"non_filter_step":9,"trailing_filter":10,"THEN":11,"WHERE":12,"expr":13,"+":14,"-":15,"*":16,"/":17,"%":18,"AND":19,"OR":20,"EQ":21,"NEQ":22,"RE":23,"GT":24,"GTE":25,"LT":26,"LTE":27,"IN":28,"AS":29,"SYMBOL":30,"NOT":31,"(":32,")":33,"ternary":34,"func":35,"array":36,"obj":37,"NUMBER":38,"STRING":39,"TRUE":40,"FALSE":41,"NULL":42,"UNDEFINED":43,"path":44,"?":45,":":46,"IDENT":47,"expr_list":48,"[":49,"]":50,",":51,"{":52,"obj_items":53,"}":54,"obj_item":55,"obj_non_id":56,"selector":57,"sorter":58,"aggregator":59,"SELECT":60,"CONTRACT":61,"EXPAND":62,"ORDER_BY":63,"order_list":64,"order_spec":65,"local_path":66,"ASC":67,"DESC":68,"AGGREGATE":69,"aggr_list":70,"arg_path":71,"ARGREF":72,".":73,"THIS":74,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"THEN",12:"WHERE",14:"+",15:"-",16:"*",17:"/",18:"%",19:"AND",20:"OR",21:"EQ",22:"NEQ",23:"RE",24:"GT",25:"GTE",26:"LT",27:"LTE",28:"IN",29:"AS",30:"SYMBOL",31:"NOT",32:"(",33:")",38:"NUMBER",39:"STRING",40:"TRUE",41:"FALSE",42:"NULL",43:"UNDEFINED",45:"?",46:":",47:"IDENT",49:"[",50:"]",51:",",52:"{",54:"}",60:"SELECT",61:"CONTRACT",62:"EXPAND",63:"ORDER_BY",67:"ASC",68:"DESC",69:"AGGREGATE",72:"ARGREF",73:".",74:"THIS"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[7,1],[7,2],[7,1],[8,2],[8,1],[10,2],[10,2],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,3],[13,2],[13,2],[13,3],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[34,5],[35,4],[35,3],[36,3],[36,2],[48,1],[48,3],[37,3],[37,2],[53,1],[53,3],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[55,3],[55,3],[55,1],[9,1],[9,1],[9,1],[57,2],[57,2],[57,2],[58,2],[64,1],[64,3],[65,1],[65,2],[65,2],[59,2],[70,1],[70,3],[44,1],[44,1],[71,1],[71,3],[71,4],[66,1],[66,1],[66,1],[66,3],[66,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = [$$[$0]]; 
break;
case 3: this.$ = $$[$0-1]; $$[$0-1].push($$[$0]); 
break;
case 9: this.$ = yy.node('filter', $$[$0]); 
break;
case 10: this.$ = yy.node('filter', $$[$0]); 
break;
case 11: this.$ = yy.node('filter', $$[$0]); 
break;
case 12: this.$ = yy.node('filter', $$[$0]); 
break;
case 13: this.$ = yy.node('add', $$[$0-2], $$[$0]); 
break;
case 14: this.$ = yy.node('sub', $$[$0-2], $$[$0]); 
break;
case 15: this.$ = yy.node('mul', $$[$0-2], $$[$0]); 
break;
case 16: this.$ = yy.node('div', $$[$0-2], $$[$0]); 
break;
case 17: this.$ = yy.node('mod', $$[$0-2], $$[$0]); 
break;
case 18: this.$ = yy.node('and', $$[$0-2], $$[$0]); 
break;
case 19: this.$ = yy.node('or', $$[$0-2], $$[$0]); 
break;
case 20: this.$ = yy.node('eq', $$[$0-2], $$[$0]); 
break;
case 21: this.$ = yy.node('neq', $$[$0-2], $$[$0]); 
break;
case 22: this.$ = yy.node('re', $$[$0-2], $$[$0]); 
break;
case 23: this.$ = yy.node('gt', $$[$0-2], $$[$0]); 
break;
case 24: this.$ = yy.node('gte', $$[$0-2], $$[$0]); 
break;
case 25: this.$ = yy.node('lt', $$[$0-2], $$[$0]); 
break;
case 26: this.$ = yy.node('lte', $$[$0-2], $$[$0]); 
break;
case 27: this.$ = yy.node('in', $$[$0-2], $$[$0]); 
break;
case 28: this.$ = yy.node('as', $$[$0-2], $$[$0]); 
break;
case 29: this.$ = yy.node('not', $$[$0]); 
break;
case 30: this.$ = yy.node('neg', $$[$0]); 
break;
case 31: this.$ = $$[$0-1]; 
break;
case 36: this.$ = Number(yytext); 
break;
case 37: this.$ = yytext; 
break;
case 38: this.$ = true; 
break;
case 39: this.$ = false; 
break;
case 40: this.$ = null; 
break;
case 41: this.$ = undefined; 
break;
case 43: this.$ = yy.node('tern', $$[$0-4], $$[$0-2], $$[$0]); 
break;
case 44: this.$ = yy.node('func', $$[$0-3], $$[$0-1]); 
break;
case 45: this.$ = yy.node('func', $$[$0-2], []); 
break;
case 46: this.$ = yy.node('arr', $$[$0-1]); 
break;
case 47: this.$ = yy.node('arr', []); 
break;
case 48: this.$ = [$$[$0]]; 
break;
case 49: this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 50: this.$ = yy.node('obj', $$[$0-1]); 
break;
case 51: this.$ = yy.node('obj', {}); 
break;
case 52: this.$ = {}; this.$[$$[$0][0]] = $$[$0][1]; 
break;
case 53: this.$ = $$[$0-2]; this.$[$$[$0][0]] = $$[$0][1]; 
break;
case 60: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 61: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 62: this.$ = [$$[$0], yy.path('local', $$[$0])]; 
break;
case 66: this.$ = yy.node('select', $$[$0]); 
break;
case 67: this.$ = yy.node('contract', $$[$0]); 
break;
case 68: this.$ = yy.node('expand', $$[$0]); 
break;
case 69: this.$ = yy.node('sort', $$[$0]); 
break;
case 70: this.$ = [$$[$0]]; 
break;
case 71: this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 72: this.$ = { path: $$[$0], ascending: true }; 
break;
case 73: this.$ = { path: $$[$0-1], ascending: true }; 
break;
case 74: this.$ = { path: $$[$0-1] }; 
break;
case 75: this.$ = yy.node('aggregate', $$[$0]); 
break;
case 76: this.$ = [$$[$0]]; 
break;
case 77: this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 80: this.$ = yy.path('arg', Number($$[$0])-1); 
break;
case 81: this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 82: this.$ = $$[$0-3]; $$[$0-3].push($$[$0-1]); 
break;
case 83: this.$ = yy.path('local'); 
break;
case 84: this.$ = yy.path('local', $$[$0]); 
break;
case 85: this.$ = yy.path('symbol', $$[$0]); 
break;
case 86: this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 87: this.$ = $$[$0-3]; $$[$0-3].push($$[$0-1]); 
break;
}
},
table: [{3:1,4:2,6:3,8:4,9:5,12:[1,6],13:7,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],57:8,58:9,59:10,60:[1,25],61:[1,26],62:[1,27],63:[1,28],66:34,69:[1,29],71:33,72:[1,35],74:[1,36]},{1:[3]},{5:[1,38],7:39,9:42,10:40,11:[1,41],12:[1,43],57:8,58:9,59:10,60:[1,25],61:[1,26],62:[1,27],63:[1,28],69:[1,29]},{5:[2,2],11:[2,2],12:[2,2],60:[2,2],61:[2,2],62:[2,2],63:[2,2],69:[2,2]},{5:[2,4],11:[2,4],12:[2,4],60:[2,4],61:[2,4],62:[2,4],63:[2,4],69:[2,4]},{5:[2,5],11:[2,5],12:[2,5],60:[2,5],61:[2,5],62:[2,5],63:[2,5],69:[2,5]},{13:44,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{5:[2,10],11:[2,10],12:[2,10],14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[1,50],20:[1,51],21:[1,52],22:[1,53],23:[1,54],24:[1,55],25:[1,56],26:[1,57],27:[1,58],28:[1,59],29:[1,60],45:[1,61],60:[2,10],61:[2,10],62:[2,10],63:[2,10],69:[2,10]},{5:[2,63],11:[2,63],12:[2,63],60:[2,63],61:[2,63],62:[2,63],63:[2,63],69:[2,63]},{5:[2,64],11:[2,64],12:[2,64],60:[2,64],61:[2,64],62:[2,64],63:[2,64],69:[2,64]},{5:[2,65],11:[2,65],12:[2,65],60:[2,65],61:[2,65],62:[2,65],63:[2,65],69:[2,65]},{13:62,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{13:63,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{13:64,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{5:[2,32],11:[2,32],12:[2,32],14:[2,32],15:[2,32],16:[2,32],17:[2,32],18:[2,32],19:[2,32],20:[2,32],21:[2,32],22:[2,32],23:[2,32],24:[2,32],25:[2,32],26:[2,32],27:[2,32],28:[2,32],29:[2,32],33:[2,32],45:[2,32],46:[2,32],50:[2,32],51:[2,32],54:[2,32],60:[2,32],61:[2,32],62:[2,32],63:[2,32],69:[2,32]},{5:[2,33],11:[2,33],12:[2,33],14:[2,33],15:[2,33],16:[2,33],17:[2,33],18:[2,33],19:[2,33],20:[2,33],21:[2,33],22:[2,33],23:[2,33],24:[2,33],25:[2,33],26:[2,33],27:[2,33],28:[2,33],29:[2,33],33:[2,33],45:[2,33],46:[2,33],50:[2,33],51:[2,33],54:[2,33],60:[2,33],61:[2,33],62:[2,33],63:[2,33],69:[2,33]},{5:[2,34],11:[2,34],12:[2,34],14:[2,34],15:[2,34],16:[2,34],17:[2,34],18:[2,34],19:[2,34],20:[2,34],21:[2,34],22:[2,34],23:[2,34],24:[2,34],25:[2,34],26:[2,34],27:[2,34],28:[2,34],29:[2,34],33:[2,34],45:[2,34],46:[2,34],50:[2,34],51:[2,34],54:[2,34],60:[2,34],61:[2,34],62:[2,34],63:[2,34],69:[2,34]},{5:[2,35],11:[2,35],12:[2,35],14:[2,35],15:[2,35],16:[2,35],17:[2,35],18:[2,35],19:[2,35],20:[2,35],21:[2,35],22:[2,35],23:[2,35],24:[2,35],25:[2,35],26:[2,35],27:[2,35],28:[2,35],29:[2,35],33:[2,35],45:[2,35],46:[2,35],50:[2,35],51:[2,35],54:[2,35],60:[2,35],61:[2,35],62:[2,35],63:[2,35],69:[2,35]},{5:[2,36],11:[2,36],12:[2,36],14:[2,36],15:[2,36],16:[2,36],17:[2,36],18:[2,36],19:[2,36],20:[2,36],21:[2,36],22:[2,36],23:[2,36],24:[2,36],25:[2,36],26:[2,36],27:[2,36],28:[2,36],29:[2,36],33:[2,36],45:[2,36],46:[2,36],50:[2,36],51:[2,36],54:[2,36],60:[2,36],61:[2,36],62:[2,36],63:[2,36],69:[2,36]},{5:[2,37],11:[2,37],12:[2,37],14:[2,37],15:[2,37],16:[2,37],17:[2,37],18:[2,37],19:[2,37],20:[2,37],21:[2,37],22:[2,37],23:[2,37],24:[2,37],25:[2,37],26:[2,37],27:[2,37],28:[2,37],29:[2,37],33:[2,37],45:[2,37],46:[2,37],50:[2,37],51:[2,37],54:[2,37],60:[2,37],61:[2,37],62:[2,37],63:[2,37],69:[2,37]},{5:[2,38],11:[2,38],12:[2,38],14:[2,38],15:[2,38],16:[2,38],17:[2,38],18:[2,38],19:[2,38],20:[2,38],21:[2,38],22:[2,38],23:[2,38],24:[2,38],25:[2,38],26:[2,38],27:[2,38],28:[2,38],29:[2,38],33:[2,38],45:[2,38],46:[2,38],50:[2,38],51:[2,38],54:[2,38],60:[2,38],61:[2,38],62:[2,38],63:[2,38],69:[2,38]},{5:[2,39],11:[2,39],12:[2,39],14:[2,39],15:[2,39],16:[2,39],17:[2,39],18:[2,39],19:[2,39],20:[2,39],21:[2,39],22:[2,39],23:[2,39],24:[2,39],25:[2,39],26:[2,39],27:[2,39],28:[2,39],29:[2,39],33:[2,39],45:[2,39],46:[2,39],50:[2,39],51:[2,39],54:[2,39],60:[2,39],61:[2,39],62:[2,39],63:[2,39],69:[2,39]},{5:[2,40],11:[2,40],12:[2,40],14:[2,40],15:[2,40],16:[2,40],17:[2,40],18:[2,40],19:[2,40],20:[2,40],21:[2,40],22:[2,40],23:[2,40],24:[2,40],25:[2,40],26:[2,40],27:[2,40],28:[2,40],29:[2,40],33:[2,40],45:[2,40],46:[2,40],50:[2,40],51:[2,40],54:[2,40],60:[2,40],61:[2,40],62:[2,40],63:[2,40],69:[2,40]},{5:[2,41],11:[2,41],12:[2,41],14:[2,41],15:[2,41],16:[2,41],17:[2,41],18:[2,41],19:[2,41],20:[2,41],21:[2,41],22:[2,41],23:[2,41],24:[2,41],25:[2,41],26:[2,41],27:[2,41],28:[2,41],29:[2,41],33:[2,41],45:[2,41],46:[2,41],50:[2,41],51:[2,41],54:[2,41],60:[2,41],61:[2,41],62:[2,41],63:[2,41],69:[2,41]},{5:[2,42],11:[2,42],12:[2,42],14:[2,42],15:[2,42],16:[2,42],17:[2,42],18:[2,42],19:[2,42],20:[2,42],21:[2,42],22:[2,42],23:[2,42],24:[2,42],25:[2,42],26:[2,42],27:[2,42],28:[2,42],29:[2,42],33:[2,42],45:[2,42],46:[2,42],50:[2,42],51:[2,42],54:[2,42],60:[2,42],61:[2,42],62:[2,42],63:[2,42],69:[2,42]},{13:65,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{13:66,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{13:67,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{30:[1,37],47:[1,71],64:68,65:69,66:70,74:[1,36]},{47:[1,73],70:72},{5:[2,84],11:[2,84],12:[2,84],14:[2,84],15:[2,84],16:[2,84],17:[2,84],18:[2,84],19:[2,84],20:[2,84],21:[2,84],22:[2,84],23:[2,84],24:[2,84],25:[2,84],26:[2,84],27:[2,84],28:[2,84],29:[2,84],32:[1,74],33:[2,84],45:[2,84],46:[2,84],49:[2,84],50:[2,84],51:[2,84],54:[2,84],60:[2,84],61:[2,84],62:[2,84],63:[2,84],69:[2,84],73:[2,84]},{13:77,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],48:75,49:[1,31],50:[1,76],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{38:[1,83],39:[1,84],40:[1,85],41:[1,86],42:[1,87],43:[1,88],47:[1,82],53:78,54:[1,79],55:80,56:81},{5:[2,78],11:[2,78],12:[2,78],14:[2,78],15:[2,78],16:[2,78],17:[2,78],18:[2,78],19:[2,78],20:[2,78],21:[2,78],22:[2,78],23:[2,78],24:[2,78],25:[2,78],26:[2,78],27:[2,78],28:[2,78],29:[2,78],33:[2,78],45:[2,78],46:[2,78],49:[1,90],50:[2,78],51:[2,78],54:[2,78],60:[2,78],61:[2,78],62:[2,78],63:[2,78],69:[2,78],73:[1,89]},{5:[2,79],11:[2,79],12:[2,79],14:[2,79],15:[2,79],16:[2,79],17:[2,79],18:[2,79],19:[2,79],20:[2,79],21:[2,79],22:[2,79],23:[2,79],24:[2,79],25:[2,79],26:[2,79],27:[2,79],28:[2,79],29:[2,79],33:[2,79],45:[2,79],46:[2,79],49:[1,92],50:[2,79],51:[2,79],54:[2,79],60:[2,79],61:[2,79],62:[2,79],63:[2,79],69:[2,79],73:[1,91]},{5:[2,80],11:[2,80],12:[2,80],14:[2,80],15:[2,80],16:[2,80],17:[2,80],18:[2,80],19:[2,80],20:[2,80],21:[2,80],22:[2,80],23:[2,80],24:[2,80],25:[2,80],26:[2,80],27:[2,80],28:[2,80],29:[2,80],33:[2,80],45:[2,80],46:[2,80],49:[2,80],50:[2,80],51:[2,80],54:[2,80],60:[2,80],61:[2,80],62:[2,80],63:[2,80],69:[2,80],73:[2,80]},{5:[2,83],11:[2,83],12:[2,83],14:[2,83],15:[2,83],16:[2,83],17:[2,83],18:[2,83],19:[2,83],20:[2,83],21:[2,83],22:[2,83],23:[2,83],24:[2,83],25:[2,83],26:[2,83],27:[2,83],28:[2,83],29:[2,83],33:[2,83],45:[2,83],46:[2,83],49:[2,83],50:[2,83],51:[2,83],54:[2,83],60:[2,83],61:[2,83],62:[2,83],63:[2,83],67:[2,83],68:[2,83],69:[2,83],73:[2,83]},{5:[2,85],11:[2,85],12:[2,85],14:[2,85],15:[2,85],16:[2,85],17:[2,85],18:[2,85],19:[2,85],20:[2,85],21:[2,85],22:[2,85],23:[2,85],24:[2,85],25:[2,85],26:[2,85],27:[2,85],28:[2,85],29:[2,85],33:[2,85],45:[2,85],46:[2,85],49:[2,85],50:[2,85],51:[2,85],54:[2,85],60:[2,85],61:[2,85],62:[2,85],63:[2,85],67:[2,85],68:[2,85],69:[2,85],73:[2,85]},{1:[2,1]},{5:[2,3],11:[2,3],12:[2,3],60:[2,3],61:[2,3],62:[2,3],63:[2,3],69:[2,3]},{5:[2,6],11:[2,6],12:[2,6],60:[2,6],61:[2,6],62:[2,6],63:[2,6],69:[2,6]},{9:93,13:94,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],57:8,58:9,59:10,60:[1,25],61:[1,26],62:[1,27],63:[1,28],66:34,69:[1,29],71:33,72:[1,35],74:[1,36]},{5:[2,8],11:[2,8],12:[2,8],60:[2,8],61:[2,8],62:[2,8],63:[2,8],69:[2,8]},{13:95,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{5:[2,9],11:[2,9],12:[2,9],14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[1,50],20:[1,51],21:[1,52],22:[1,53],23:[1,54],24:[1,55],25:[1,56],26:[1,57],27:[1,58],28:[1,59],29:[1,60],45:[1,61],60:[2,9],61:[2,9],62:[2,9],63:[2,9],69:[2,9]},{13:96,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{13:97,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{13:98,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{13:99,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{13:100,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{13:101,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{13:102,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{13:103,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{13:104,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{13:105,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{13:106,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{13:107,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{13:108,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{13:109,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{13:110,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{30:[1,111]},{13:112,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{5:[2,29],11:[2,29],12:[2,29],14:[2,29],15:[2,29],16:[2,29],17:[2,29],18:[2,29],19:[2,29],20:[2,29],21:[2,29],22:[2,29],23:[2,29],24:[2,29],25:[2,29],26:[2,29],27:[2,29],28:[2,29],29:[1,60],33:[2,29],45:[2,29],46:[2,29],50:[2,29],51:[2,29],54:[2,29],60:[2,29],61:[2,29],62:[2,29],63:[2,29],69:[2,29]},{5:[2,30],11:[2,30],12:[2,30],14:[2,30],15:[2,30],16:[2,30],17:[2,30],18:[2,30],19:[2,30],20:[2,30],21:[2,30],22:[2,30],23:[2,30],24:[2,30],25:[2,30],26:[2,30],27:[2,30],28:[2,30],29:[1,60],33:[2,30],45:[2,30],46:[2,30],50:[2,30],51:[2,30],54:[2,30],60:[2,30],61:[2,30],62:[2,30],63:[2,30],69:[2,30]},{14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[1,50],20:[1,51],21:[1,52],22:[1,53],23:[1,54],24:[1,55],25:[1,56],26:[1,57],27:[1,58],28:[1,59],29:[1,60],33:[1,113],45:[1,61]},{5:[2,66],11:[2,66],12:[2,66],14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[1,50],20:[1,51],21:[1,52],22:[1,53],23:[1,54],24:[1,55],25:[1,56],26:[1,57],27:[1,58],28:[1,59],29:[1,60],45:[1,61],60:[2,66],61:[2,66],62:[2,66],63:[2,66],69:[2,66]},{5:[2,67],11:[2,67],12:[2,67],14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[1,50],20:[1,51],21:[1,52],22:[1,53],23:[1,54],24:[1,55],25:[1,56],26:[1,57],27:[1,58],28:[1,59],29:[1,60],45:[1,61],60:[2,67],61:[2,67],62:[2,67],63:[2,67],69:[2,67]},{5:[2,68],11:[2,68],12:[2,68],14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[1,50],20:[1,51],21:[1,52],22:[1,53],23:[1,54],24:[1,55],25:[1,56],26:[1,57],27:[1,58],28:[1,59],29:[1,60],45:[1,61],60:[2,68],61:[2,68],62:[2,68],63:[2,68],69:[2,68]},{5:[2,69],11:[2,69],12:[2,69],51:[1,114],60:[2,69],61:[2,69],62:[2,69],63:[2,69],69:[2,69]},{5:[2,70],11:[2,70],12:[2,70],51:[2,70],60:[2,70],61:[2,70],62:[2,70],63:[2,70],69:[2,70]},{5:[2,72],11:[2,72],12:[2,72],49:[1,92],51:[2,72],60:[2,72],61:[2,72],62:[2,72],63:[2,72],67:[1,115],68:[1,116],69:[2,72],73:[1,91]},{5:[2,84],11:[2,84],12:[2,84],49:[2,84],51:[2,84],60:[2,84],61:[2,84],62:[2,84],63:[2,84],67:[2,84],68:[2,84],69:[2,84],73:[2,84]},{5:[2,75],11:[2,75],12:[2,75],51:[1,117],60:[2,75],61:[2,75],62:[2,75],63:[2,75],69:[2,75]},{5:[2,76],11:[2,76],12:[2,76],51:[2,76],60:[2,76],61:[2,76],62:[2,76],63:[2,76],69:[2,76]},{13:77,15:[1,12],30:[1,37],31:[1,11],32:[1,13],33:[1,119],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],48:118,49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{50:[1,120],51:[1,121]},{5:[2,47],11:[2,47],12:[2,47],14:[2,47],15:[2,47],16:[2,47],17:[2,47],18:[2,47],19:[2,47],20:[2,47],21:[2,47],22:[2,47],23:[2,47],24:[2,47],25:[2,47],26:[2,47],27:[2,47],28:[2,47],29:[2,47],33:[2,47],45:[2,47],46:[2,47],50:[2,47],51:[2,47],54:[2,47],60:[2,47],61:[2,47],62:[2,47],63:[2,47],69:[2,47]},{14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[1,50],20:[1,51],21:[1,52],22:[1,53],23:[1,54],24:[1,55],25:[1,56],26:[1,57],27:[1,58],28:[1,59],29:[1,60],33:[2,48],45:[1,61],50:[2,48],51:[2,48]},{51:[1,123],54:[1,122]},{5:[2,51],11:[2,51],12:[2,51],14:[2,51],15:[2,51],16:[2,51],17:[2,51],18:[2,51],19:[2,51],20:[2,51],21:[2,51],22:[2,51],23:[2,51],24:[2,51],25:[2,51],26:[2,51],27:[2,51],28:[2,51],29:[2,51],33:[2,51],45:[2,51],46:[2,51],50:[2,51],51:[2,51],54:[2,51],60:[2,51],61:[2,51],62:[2,51],63:[2,51],69:[2,51]},{51:[2,52],54:[2,52]},{46:[1,124]},{46:[1,125],51:[2,62],54:[2,62]},{46:[2,54]},{46:[2,55]},{46:[2,56]},{46:[2,57]},{46:[2,58]},{46:[2,59]},{47:[1,126]},{13:127,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{47:[1,128]},{13:129,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{5:[2,7],11:[2,7],12:[2,7],60:[2,7],61:[2,7],62:[2,7],63:[2,7],69:[2,7]},{5:[2,11],11:[2,11],12:[2,11],14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[1,50],20:[1,51],21:[1,52],22:[1,53],23:[1,54],24:[1,55],25:[1,56],26:[1,57],27:[1,58],28:[1,59],29:[1,60],45:[1,61],60:[2,11],61:[2,11],62:[2,11],63:[2,11],69:[2,11]},{5:[2,12],11:[2,12],12:[2,12],14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[1,50],20:[1,51],21:[1,52],22:[1,53],23:[1,54],24:[1,55],25:[1,56],26:[1,57],27:[1,58],28:[1,59],29:[1,60],45:[1,61],60:[2,12],61:[2,12],62:[2,12],63:[2,12],69:[2,12]},{5:[2,13],11:[2,13],12:[2,13],14:[2,13],15:[2,13],16:[1,47],17:[1,48],18:[1,49],19:[2,13],20:[2,13],21:[2,13],22:[2,13],23:[2,13],24:[2,13],25:[2,13],26:[2,13],27:[2,13],28:[2,13],29:[1,60],33:[2,13],45:[2,13],46:[2,13],50:[2,13],51:[2,13],54:[2,13],60:[2,13],61:[2,13],62:[2,13],63:[2,13],69:[2,13]},{5:[2,14],11:[2,14],12:[2,14],14:[2,14],15:[2,14],16:[1,47],17:[1,48],18:[1,49],19:[2,14],20:[2,14],21:[2,14],22:[2,14],23:[2,14],24:[2,14],25:[2,14],26:[2,14],27:[2,14],28:[2,14],29:[1,60],33:[2,14],45:[2,14],46:[2,14],50:[2,14],51:[2,14],54:[2,14],60:[2,14],61:[2,14],62:[2,14],63:[2,14],69:[2,14]},{5:[2,15],11:[2,15],12:[2,15],14:[2,15],15:[2,15],16:[2,15],17:[2,15],18:[2,15],19:[2,15],20:[2,15],21:[2,15],22:[2,15],23:[2,15],24:[2,15],25:[2,15],26:[2,15],27:[2,15],28:[2,15],29:[1,60],33:[2,15],45:[2,15],46:[2,15],50:[2,15],51:[2,15],54:[2,15],60:[2,15],61:[2,15],62:[2,15],63:[2,15],69:[2,15]},{5:[2,16],11:[2,16],12:[2,16],14:[2,16],15:[2,16],16:[2,16],17:[2,16],18:[2,16],19:[2,16],20:[2,16],21:[2,16],22:[2,16],23:[2,16],24:[2,16],25:[2,16],26:[2,16],27:[2,16],28:[2,16],29:[1,60],33:[2,16],45:[2,16],46:[2,16],50:[2,16],51:[2,16],54:[2,16],60:[2,16],61:[2,16],62:[2,16],63:[2,16],69:[2,16]},{5:[2,17],11:[2,17],12:[2,17],14:[2,17],15:[2,17],16:[2,17],17:[2,17],18:[2,17],19:[2,17],20:[2,17],21:[2,17],22:[2,17],23:[2,17],24:[2,17],25:[2,17],26:[2,17],27:[2,17],28:[2,17],29:[1,60],33:[2,17],45:[2,17],46:[2,17],50:[2,17],51:[2,17],54:[2,17],60:[2,17],61:[2,17],62:[2,17],63:[2,17],69:[2,17]},{5:[2,18],11:[2,18],12:[2,18],14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[2,18],20:[2,18],21:[1,52],22:[1,53],23:[1,54],24:[1,55],25:[1,56],26:[1,57],27:[1,58],28:[1,59],29:[1,60],33:[2,18],45:[2,18],46:[2,18],50:[2,18],51:[2,18],54:[2,18],60:[2,18],61:[2,18],62:[2,18],63:[2,18],69:[2,18]},{5:[2,19],11:[2,19],12:[2,19],14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[1,50],20:[2,19],21:[1,52],22:[1,53],23:[1,54],24:[1,55],25:[1,56],26:[1,57],27:[1,58],28:[1,59],29:[1,60],33:[2,19],45:[2,19],46:[2,19],50:[2,19],51:[2,19],54:[2,19],60:[2,19],61:[2,19],62:[2,19],63:[2,19],69:[2,19]},{5:[2,20],11:[2,20],12:[2,20],14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[2,20],20:[2,20],21:[2,20],22:[2,20],23:[2,20],24:[1,55],25:[1,56],26:[1,57],27:[1,58],28:[2,20],29:[1,60],33:[2,20],45:[2,20],46:[2,20],50:[2,20],51:[2,20],54:[2,20],60:[2,20],61:[2,20],62:[2,20],63:[2,20],69:[2,20]},{5:[2,21],11:[2,21],12:[2,21],14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[2,21],20:[2,21],21:[2,21],22:[2,21],23:[2,21],24:[1,55],25:[1,56],26:[1,57],27:[1,58],28:[2,21],29:[1,60],33:[2,21],45:[2,21],46:[2,21],50:[2,21],51:[2,21],54:[2,21],60:[2,21],61:[2,21],62:[2,21],63:[2,21],69:[2,21]},{5:[2,22],11:[2,22],12:[2,22],14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[2,22],20:[2,22],21:[2,22],22:[2,22],23:[2,22],24:[1,55],25:[1,56],26:[1,57],27:[1,58],28:[2,22],29:[1,60],33:[2,22],45:[2,22],46:[2,22],50:[2,22],51:[2,22],54:[2,22],60:[2,22],61:[2,22],62:[2,22],63:[2,22],69:[2,22]},{5:[2,23],11:[2,23],12:[2,23],14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[2,23],20:[2,23],21:[2,23],22:[2,23],23:[2,23],24:[2,23],25:[2,23],26:[2,23],27:[2,23],28:[2,23],29:[1,60],33:[2,23],45:[2,23],46:[2,23],50:[2,23],51:[2,23],54:[2,23],60:[2,23],61:[2,23],62:[2,23],63:[2,23],69:[2,23]},{5:[2,24],11:[2,24],12:[2,24],14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[2,24],20:[2,24],21:[2,24],22:[2,24],23:[2,24],24:[2,24],25:[2,24],26:[2,24],27:[2,24],28:[2,24],29:[1,60],33:[2,24],45:[2,24],46:[2,24],50:[2,24],51:[2,24],54:[2,24],60:[2,24],61:[2,24],62:[2,24],63:[2,24],69:[2,24]},{5:[2,25],11:[2,25],12:[2,25],14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[2,25],20:[2,25],21:[2,25],22:[2,25],23:[2,25],24:[2,25],25:[2,25],26:[2,25],27:[2,25],28:[2,25],29:[1,60],33:[2,25],45:[2,25],46:[2,25],50:[2,25],51:[2,25],54:[2,25],60:[2,25],61:[2,25],62:[2,25],63:[2,25],69:[2,25]},{5:[2,26],11:[2,26],12:[2,26],14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[2,26],20:[2,26],21:[2,26],22:[2,26],23:[2,26],24:[2,26],25:[2,26],26:[2,26],27:[2,26],28:[2,26],29:[1,60],33:[2,26],45:[2,26],46:[2,26],50:[2,26],51:[2,26],54:[2,26],60:[2,26],61:[2,26],62:[2,26],63:[2,26],69:[2,26]},{5:[2,27],11:[2,27],12:[2,27],14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[2,27],20:[2,27],21:[2,27],22:[2,27],23:[2,27],24:[1,55],25:[1,56],26:[1,57],27:[1,58],28:[2,27],29:[1,60],33:[2,27],45:[2,27],46:[2,27],50:[2,27],51:[2,27],54:[2,27],60:[2,27],61:[2,27],62:[2,27],63:[2,27],69:[2,27]},{5:[2,28],11:[2,28],12:[2,28],14:[2,28],15:[2,28],16:[2,28],17:[2,28],18:[2,28],19:[2,28],20:[2,28],21:[2,28],22:[2,28],23:[2,28],24:[2,28],25:[2,28],26:[2,28],27:[2,28],28:[2,28],29:[2,28],33:[2,28],45:[2,28],46:[2,28],50:[2,28],51:[2,28],54:[2,28],60:[2,28],61:[2,28],62:[2,28],63:[2,28],69:[2,28]},{14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[1,50],20:[1,51],21:[1,52],22:[1,53],23:[1,54],24:[1,55],25:[1,56],26:[1,57],27:[1,58],28:[1,59],29:[1,60],45:[1,61],46:[1,130]},{5:[2,31],11:[2,31],12:[2,31],14:[2,31],15:[2,31],16:[2,31],17:[2,31],18:[2,31],19:[2,31],20:[2,31],21:[2,31],22:[2,31],23:[2,31],24:[2,31],25:[2,31],26:[2,31],27:[2,31],28:[2,31],29:[2,31],33:[2,31],45:[2,31],46:[2,31],50:[2,31],51:[2,31],54:[2,31],60:[2,31],61:[2,31],62:[2,31],63:[2,31],69:[2,31]},{30:[1,37],47:[1,71],65:131,66:70,74:[1,36]},{5:[2,73],11:[2,73],12:[2,73],51:[2,73],60:[2,73],61:[2,73],62:[2,73],63:[2,73],69:[2,73]},{5:[2,74],11:[2,74],12:[2,74],51:[2,74],60:[2,74],61:[2,74],62:[2,74],63:[2,74],69:[2,74]},{47:[1,132]},{33:[1,133],51:[1,121]},{5:[2,45],11:[2,45],12:[2,45],14:[2,45],15:[2,45],16:[2,45],17:[2,45],18:[2,45],19:[2,45],20:[2,45],21:[2,45],22:[2,45],23:[2,45],24:[2,45],25:[2,45],26:[2,45],27:[2,45],28:[2,45],29:[2,45],33:[2,45],45:[2,45],46:[2,45],50:[2,45],51:[2,45],54:[2,45],60:[2,45],61:[2,45],62:[2,45],63:[2,45],69:[2,45]},{5:[2,46],11:[2,46],12:[2,46],14:[2,46],15:[2,46],16:[2,46],17:[2,46],18:[2,46],19:[2,46],20:[2,46],21:[2,46],22:[2,46],23:[2,46],24:[2,46],25:[2,46],26:[2,46],27:[2,46],28:[2,46],29:[2,46],33:[2,46],45:[2,46],46:[2,46],50:[2,46],51:[2,46],54:[2,46],60:[2,46],61:[2,46],62:[2,46],63:[2,46],69:[2,46]},{13:134,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{5:[2,50],11:[2,50],12:[2,50],14:[2,50],15:[2,50],16:[2,50],17:[2,50],18:[2,50],19:[2,50],20:[2,50],21:[2,50],22:[2,50],23:[2,50],24:[2,50],25:[2,50],26:[2,50],27:[2,50],28:[2,50],29:[2,50],33:[2,50],45:[2,50],46:[2,50],50:[2,50],51:[2,50],54:[2,50],60:[2,50],61:[2,50],62:[2,50],63:[2,50],69:[2,50]},{38:[1,83],39:[1,84],40:[1,85],41:[1,86],42:[1,87],43:[1,88],47:[1,82],55:135,56:81},{13:136,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{13:137,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{5:[2,81],11:[2,81],12:[2,81],14:[2,81],15:[2,81],16:[2,81],17:[2,81],18:[2,81],19:[2,81],20:[2,81],21:[2,81],22:[2,81],23:[2,81],24:[2,81],25:[2,81],26:[2,81],27:[2,81],28:[2,81],29:[2,81],33:[2,81],45:[2,81],46:[2,81],49:[2,81],50:[2,81],51:[2,81],54:[2,81],60:[2,81],61:[2,81],62:[2,81],63:[2,81],69:[2,81],73:[2,81]},{14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[1,50],20:[1,51],21:[1,52],22:[1,53],23:[1,54],24:[1,55],25:[1,56],26:[1,57],27:[1,58],28:[1,59],29:[1,60],45:[1,61],50:[1,138]},{5:[2,86],11:[2,86],12:[2,86],14:[2,86],15:[2,86],16:[2,86],17:[2,86],18:[2,86],19:[2,86],20:[2,86],21:[2,86],22:[2,86],23:[2,86],24:[2,86],25:[2,86],26:[2,86],27:[2,86],28:[2,86],29:[2,86],33:[2,86],45:[2,86],46:[2,86],49:[2,86],50:[2,86],51:[2,86],54:[2,86],60:[2,86],61:[2,86],62:[2,86],63:[2,86],67:[2,86],68:[2,86],69:[2,86],73:[2,86]},{14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[1,50],20:[1,51],21:[1,52],22:[1,53],23:[1,54],24:[1,55],25:[1,56],26:[1,57],27:[1,58],28:[1,59],29:[1,60],45:[1,61],50:[1,139]},{13:140,15:[1,12],30:[1,37],31:[1,11],32:[1,13],34:14,35:15,36:16,37:17,38:[1,18],39:[1,19],40:[1,20],41:[1,21],42:[1,22],43:[1,23],44:24,47:[1,30],49:[1,31],52:[1,32],66:34,71:33,72:[1,35],74:[1,36]},{5:[2,71],11:[2,71],12:[2,71],51:[2,71],60:[2,71],61:[2,71],62:[2,71],63:[2,71],69:[2,71]},{5:[2,77],11:[2,77],12:[2,77],51:[2,77],60:[2,77],61:[2,77],62:[2,77],63:[2,77],69:[2,77]},{5:[2,44],11:[2,44],12:[2,44],14:[2,44],15:[2,44],16:[2,44],17:[2,44],18:[2,44],19:[2,44],20:[2,44],21:[2,44],22:[2,44],23:[2,44],24:[2,44],25:[2,44],26:[2,44],27:[2,44],28:[2,44],29:[2,44],33:[2,44],45:[2,44],46:[2,44],50:[2,44],51:[2,44],54:[2,44],60:[2,44],61:[2,44],62:[2,44],63:[2,44],69:[2,44]},{14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[1,50],20:[1,51],21:[1,52],22:[1,53],23:[1,54],24:[1,55],25:[1,56],26:[1,57],27:[1,58],28:[1,59],29:[1,60],33:[2,49],45:[1,61],50:[2,49],51:[2,49]},{51:[2,53],54:[2,53]},{14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[1,50],20:[1,51],21:[1,52],22:[1,53],23:[1,54],24:[1,55],25:[1,56],26:[1,57],27:[1,58],28:[1,59],29:[1,60],45:[1,61],51:[2,60],54:[2,60]},{14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[1,50],20:[1,51],21:[1,52],22:[1,53],23:[1,54],24:[1,55],25:[1,56],26:[1,57],27:[1,58],28:[1,59],29:[1,60],45:[1,61],51:[2,61],54:[2,61]},{5:[2,82],11:[2,82],12:[2,82],14:[2,82],15:[2,82],16:[2,82],17:[2,82],18:[2,82],19:[2,82],20:[2,82],21:[2,82],22:[2,82],23:[2,82],24:[2,82],25:[2,82],26:[2,82],27:[2,82],28:[2,82],29:[2,82],33:[2,82],45:[2,82],46:[2,82],49:[2,82],50:[2,82],51:[2,82],54:[2,82],60:[2,82],61:[2,82],62:[2,82],63:[2,82],69:[2,82],73:[2,82]},{5:[2,87],11:[2,87],12:[2,87],14:[2,87],15:[2,87],16:[2,87],17:[2,87],18:[2,87],19:[2,87],20:[2,87],21:[2,87],22:[2,87],23:[2,87],24:[2,87],25:[2,87],26:[2,87],27:[2,87],28:[2,87],29:[2,87],33:[2,87],45:[2,87],46:[2,87],49:[2,87],50:[2,87],51:[2,87],54:[2,87],60:[2,87],61:[2,87],62:[2,87],63:[2,87],67:[2,87],68:[2,87],69:[2,87],73:[2,87]},{5:[2,43],11:[2,43],12:[2,43],14:[1,45],15:[1,46],16:[1,47],17:[1,48],18:[1,49],19:[1,50],20:[1,51],21:[1,52],22:[1,53],23:[1,54],24:[1,55],25:[1,56],26:[1,57],27:[1,58],28:[1,59],29:[1,60],33:[2,43],45:[2,43],46:[2,43],50:[2,43],51:[2,43],54:[2,43],60:[2,43],61:[2,43],62:[2,43],63:[2,43],69:[2,43]}],
defaultActions: {38:[2,1],83:[2,54],84:[2,55],85:[2,56],86:[2,57],87:[2,58],88:[2,59]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 38;
break;
case 1:
  yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 39;

break;
case 2:
  yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 39;

break;
case 3:
  yy_.yytext = yy_.yytext.substr(1); return 72;

break;
case 4:
  yy_.yytext = yy_.yytext.substr(1); return 30;

break;
case 5:/* skip whitespace */
break;
case 6:return 29;
break;
case 7:return 43;
break;
case 8:return 42;
break;
case 9:return 40;
break;
case 10:return 41;
break;
case 11:return 12;
break;
case 12:return 60;
break;
case 13:return 61;
break;
case 14:return 62;
break;
case 15:return 69;
break;
case 16:return 63;
break;
case 17:return 11;
break;
case 18:return 74;
break;
case 19:return 67;
break;
case 20:return 68;
break;
case 21:return 19;
break;
case 22:return 20;
break;
case 23:return 31;
break;
case 24:return "IN";
break;
case 25:return 21;
break;
case 26:return 22;
break;
case 27:return 23;
break;
case 28:return 27;
break;
case 29:return 25;
break;
case 30:return 19;
break;
case 31:return 20;
break;
case 32:return 60;
break;
case 33:return 61;
break;
case 34:return 62;
break;
case 35:return 69;
break;
case 36:return 31;
break;
case 37:return 26;
break;
case 38:return 24;
break;
case 39:return 11;
break;
case 40:return 32;
break;
case 41:return 33;
break;
case 42:return 49;
break;
case 43:return 50;
break;
case 44:return 52;
break;
case 45:return 54;
break;
case 46:return 45;
break;
case 47:return 46;
break;
case 48:return 73;
break;
case 49:return 51;
break;
case 50:return 14;
break;
case 51:return 15;
break;
case 52:return 16;
break;
case 53:return 17;
break;
case 54:return 18;
break;
case 55:return 47;
break;
case 56:return 5;
break;
case 57:return 'INVALID';
break;
}
},
rules: [/^(?:((?:[0-9]|[1-9][0-9]+))((?:\.[0-9]+))?((?:[eE][-+]?[0-9]+))?\b)/i,/^(?:"(\\x[a-fA-F0-9]{2}|\\u[a-fA-F0-9]{4}|\\[^xu]|[^"(\\)\n])*")/i,/^(?:'(\\['bfvnrt/(\\)]|\\u[a-fA-F0-9]{4}|[^'(\\)])*')/i,/^(?:%[1-9][0-9]*)/i,/^(?:%[A-Za-z_$][A-Za-z_$0-9]*)/i,/^(?:([\s])+)/i,/^(?:as\b)/i,/^(?:undefined\b)/i,/^(?:null\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:where\b)/i,/^(?:select\b)/i,/^(?:contract\b)/i,/^(?:expand\b)/i,/^(?:aggregate\b)/i,/^(?:(order([\s])+)?by\b)/i,/^(?:then\b)/i,/^(?:this\b)/i,/^(?:asc\b)/i,/^(?:desc\b)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:not\b)/i,/^(?:in\b)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=~)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:->)/i,/^(?::>)/i,/^(?:<:)/i,/^(?::=)/i,/^(?:!)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\|)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\?)/i,/^(?::)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:[A-Za-z_$][A-Za-z_$0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = objeqParser;
exports.Parser = objeqParser.Parser;
exports.parse = function () { return objeqParser.parse.apply(objeqParser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}